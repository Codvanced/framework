<?xml version="1.0" encoding="utf-8"?>
<reflection>
  <assemblies>
    <assembly name="IOC.FW.Web.MVC">
      <assemblydata version="1.0.5519.15908" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0.0</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="IOC.FW.Web">
      <assemblydata version="1.0.5519.15903" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0.0</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="IOC.FW">
      <assemblydata version="1.0.5519.15897" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>1.0.0.0</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
  </assemblies>
  <apis>
    <api id="N:IOC.FW.Configuration">
      <apidata name="IOC.FW.Configuration" group="namespace" />
      <elements>
        <element api="T:IOC.FW.Configuration.Configurations" />
      </elements>
    </api>
    <api id="T:IOC.FW.Configuration.Configurations">
      <apidata name="Configurations" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Configuration.ConfigurationSection" ref="true" />
          <type api="T:System.Configuration.ConfigurationElement" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:IOC.FW.Configuration.Configurations.#ctor" />
        <element api="P:IOC.FW.Configuration.Configurations.Current" />
        <element api="P:IOC.FW.Configuration.Configurations.InjectionFactory" />
        <element api="P:IOC.FW.Configuration.Configurations.Thumb" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Configuration" />
      </containers>
    </api>
    <api id="M:IOC.FW.Configuration.Configurations.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Configuration" />
        <type api="T:IOC.FW.Configuration.Configurations" ref="true" />
      </containers>
    </api>
    <api id="P:IOC.FW.Configuration.Configurations.Current">
      <apidata name="Current" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Current" />
      <returns>
        <type api="T:IOC.FW.Configuration.Configurations" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Configuration" />
        <type api="T:IOC.FW.Configuration.Configurations" ref="true" />
      </containers>
    </api>
    <api id="P:IOC.FW.Configuration.Configurations.InjectionFactory">
      <apidata name="InjectionFactory" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_InjectionFactory" />
      <returns>
        <type api="T:IOC.FW.Configuration.Injection.InjectionFactoryConfigurationElement" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Configuration" />
        <type api="T:IOC.FW.Configuration.Configurations" ref="true" />
      </containers>
    </api>
    <api id="P:IOC.FW.Configuration.Configurations.Thumb">
      <apidata name="Thumb" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Thumb" />
      <returns>
        <type api="T:IOC.FW.Configuration.Thumb.ThumbElement" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Configuration" />
        <type api="T:IOC.FW.Configuration.Configurations" ref="true" />
      </containers>
    </api>
    <api id="N:IOC.FW.Configuration.Injection">
      <apidata name="IOC.FW.Configuration.Injection" group="namespace" />
      <elements>
        <element api="T:IOC.FW.Configuration.Injection.InjectionElementCollection" />
        <element api="T:IOC.FW.Configuration.Injection.InjectionFactoryConfigurationElement" />
        <element api="T:IOC.FW.Configuration.Injection.InjectionElement" />
      </elements>
    </api>
    <api id="T:IOC.FW.Configuration.Injection.InjectionElement">
      <apidata name="InjectionElement" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Configuration.ConfigurationElement" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:IOC.FW.Configuration.Injection.InjectionElement.#ctor" />
        <element api="P:IOC.FW.Configuration.Injection.InjectionElement.Key" />
        <element api="P:IOC.FW.Configuration.Injection.InjectionElement.Value" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Configuration.Injection" />
      </containers>
    </api>
    <api id="M:IOC.FW.Configuration.Injection.InjectionElement.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Configuration.Injection" />
        <type api="T:IOC.FW.Configuration.Injection.InjectionElement" ref="true" />
      </containers>
    </api>
    <api id="P:IOC.FW.Configuration.Injection.InjectionElement.Key">
      <apidata name="Key" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Key" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Configuration.Injection" />
        <type api="T:IOC.FW.Configuration.Injection.InjectionElement" ref="true" />
      </containers>
    </api>
    <api id="P:IOC.FW.Configuration.Injection.InjectionElement.Value">
      <apidata name="Value" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Value" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Configuration.Injection" />
        <type api="T:IOC.FW.Configuration.Injection.InjectionElement" ref="true" />
      </containers>
    </api>
    <api id="T:IOC.FW.Configuration.Injection.InjectionElementCollection">
      <apidata name="InjectionElementCollection" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Configuration.ConfigurationElementCollection" ref="true" />
          <type api="T:System.Configuration.ConfigurationElement" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:IOC.FW.Configuration.Injection.InjectionElementCollection.CreateNewElement" />
        <element api="M:IOC.FW.Configuration.Injection.InjectionElementCollection.GetElementKey(System.Configuration.ConfigurationElement)" />
        <element api="M:IOC.FW.Configuration.Injection.InjectionElementCollection.#ctor" />
        <element api="P:IOC.FW.Configuration.Injection.InjectionElementCollection.Item(System.String)" />
        <element api="P:IOC.FW.Configuration.Injection.InjectionElementCollection.Item(System.Int32)" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Configuration.Injection" />
      </containers>
    </api>
    <api id="M:IOC.FW.Configuration.Injection.InjectionElementCollection.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Configuration.Injection" />
        <type api="T:IOC.FW.Configuration.Injection.InjectionElementCollection" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Configuration.Injection.InjectionElementCollection.CreateNewElement">
      <apidata name="CreateNewElement" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Configuration.ConfigurationElementCollection.CreateNewElement">
          <type api="T:System.Configuration.ConfigurationElementCollection" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Configuration.ConfigurationElement" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Configuration.Injection" />
        <type api="T:IOC.FW.Configuration.Injection.InjectionElementCollection" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Configuration.Injection.InjectionElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
      <apidata name="GetElementKey" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Configuration.ConfigurationElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
          <type api="T:System.Configuration.ConfigurationElementCollection" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="element">
          <type api="T:System.Configuration.ConfigurationElement" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Configuration.Injection" />
        <type api="T:IOC.FW.Configuration.Injection.InjectionElementCollection" ref="true" />
      </containers>
    </api>
    <api id="P:IOC.FW.Configuration.Injection.InjectionElementCollection.Item(System.Int32)">
      <apidata name="Item" group="member" subgroup="property" />
      <memberdata visibility="public" default="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Item" />
      <parameters>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:IOC.FW.Configuration.Injection.InjectionElement" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Configuration.Injection" />
        <type api="T:IOC.FW.Configuration.Injection.InjectionElementCollection" ref="true" />
      </containers>
    </api>
    <api id="P:IOC.FW.Configuration.Injection.InjectionElementCollection.Item(System.String)">
      <apidata name="Item" group="member" subgroup="property" />
      <memberdata visibility="public" default="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Item" />
      <parameters>
        <parameter name="key">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:IOC.FW.Configuration.Injection.InjectionElement" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Configuration.Injection" />
        <type api="T:IOC.FW.Configuration.Injection.InjectionElementCollection" ref="true" />
      </containers>
    </api>
    <api id="T:IOC.FW.Configuration.Injection.InjectionFactoryConfigurationElement">
      <apidata name="InjectionFactoryConfigurationElement" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Configuration.ConfigurationElement" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:IOC.FW.Configuration.Injection.InjectionFactoryConfigurationElement.#ctor" />
        <element api="P:IOC.FW.Configuration.Injection.InjectionFactoryConfigurationElement.Injection" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Configuration.Injection" />
      </containers>
    </api>
    <api id="M:IOC.FW.Configuration.Injection.InjectionFactoryConfigurationElement.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Configuration.Injection" />
        <type api="T:IOC.FW.Configuration.Injection.InjectionFactoryConfigurationElement" ref="true" />
      </containers>
    </api>
    <api id="P:IOC.FW.Configuration.Injection.InjectionFactoryConfigurationElement.Injection">
      <apidata name="Injection" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Injection" />
      <returns>
        <type api="T:IOC.FW.Configuration.Injection.InjectionElementCollection" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Configuration.Injection" />
        <type api="T:IOC.FW.Configuration.Injection.InjectionFactoryConfigurationElement" ref="true" />
      </containers>
    </api>
    <api id="N:IOC.FW.Configuration.Thumb">
      <apidata name="IOC.FW.Configuration.Thumb" group="namespace" />
      <elements>
        <element api="T:IOC.FW.Configuration.Thumb.ThumbElement" />
      </elements>
    </api>
    <api id="T:IOC.FW.Configuration.Thumb.ThumbElement">
      <apidata name="ThumbElement" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Configuration.ConfigurationElement" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:IOC.FW.Configuration.Thumb.ThumbElement.#ctor" />
        <element api="P:IOC.FW.Configuration.Thumb.ThumbElement.NotFoundPath" />
        <element api="P:IOC.FW.Configuration.Thumb.ThumbElement.DefaultWidth" />
        <element api="P:IOC.FW.Configuration.Thumb.ThumbElement.DefaultHeight" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Configuration.Thumb" />
      </containers>
    </api>
    <api id="M:IOC.FW.Configuration.Thumb.ThumbElement.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Configuration.Thumb" />
        <type api="T:IOC.FW.Configuration.Thumb.ThumbElement" ref="true" />
      </containers>
    </api>
    <api id="P:IOC.FW.Configuration.Thumb.ThumbElement.DefaultHeight">
      <apidata name="DefaultHeight" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_DefaultHeight" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Configuration.Thumb" />
        <type api="T:IOC.FW.Configuration.Thumb.ThumbElement" ref="true" />
      </containers>
    </api>
    <api id="P:IOC.FW.Configuration.Thumb.ThumbElement.DefaultWidth">
      <apidata name="DefaultWidth" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_DefaultWidth" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Configuration.Thumb" />
        <type api="T:IOC.FW.Configuration.Thumb.ThumbElement" ref="true" />
      </containers>
    </api>
    <api id="P:IOC.FW.Configuration.Thumb.ThumbElement.NotFoundPath">
      <apidata name="NotFoundPath" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_NotFoundPath" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Configuration.Thumb" />
        <type api="T:IOC.FW.Configuration.Thumb.ThumbElement" ref="true" />
      </containers>
    </api>
    <api id="N:IOC.FW.Core">
      <apidata name="IOC.FW.Core" group="namespace" />
      <elements>
        <element api="T:IOC.FW.Core.Enumerators" />
        <element api="T:IOC.FW.Core.Enumerators.ReferencePoint" />
        <element api="T:IOC.FW.Core.Extensions" />
      </elements>
    </api>
    <api id="T:IOC.FW.Core.Enumerators">
      <apidata name="Enumerators" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:IOC.FW.Core.Enumerators.#ctor" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Enumerators.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core" />
        <type api="T:IOC.FW.Core.Enumerators" ref="true" />
      </containers>
    </api>
    <api id="T:IOC.FW.Core.Enumerators.ReferencePoint">
      <apidata name="ReferencePoint" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <enumerationbase>
        <type api="T:System.Byte" ref="false" />
      </enumerationbase>
      <elements>
        <element api="F:IOC.FW.Core.Enumerators.ReferencePoint.TopLeft" />
        <element api="F:IOC.FW.Core.Enumerators.ReferencePoint.TopCenter" />
        <element api="F:IOC.FW.Core.Enumerators.ReferencePoint.TopRight" />
        <element api="F:IOC.FW.Core.Enumerators.ReferencePoint.MiddleLeft" />
        <element api="F:IOC.FW.Core.Enumerators.ReferencePoint.MiddleCenter" />
        <element api="F:IOC.FW.Core.Enumerators.ReferencePoint.MiddleRight" />
        <element api="F:IOC.FW.Core.Enumerators.ReferencePoint.BottomLeft" />
        <element api="F:IOC.FW.Core.Enumerators.ReferencePoint.BottomCenter" />
        <element api="F:IOC.FW.Core.Enumerators.ReferencePoint.BottomRight" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core" />
        <type api="T:IOC.FW.Core.Enumerators" ref="true" />
      </containers>
    </api>
    <api id="F:IOC.FW.Core.Enumerators.ReferencePoint.BottomCenter">
      <apidata name="BottomCenter" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:IOC.FW.Core.Enumerators.ReferencePoint" ref="false">
          <type api="T:IOC.FW.Core.Enumerators" ref="true" />
        </type>
      </returns>
      <value>8</value>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core" />
        <type api="T:IOC.FW.Core.Enumerators.ReferencePoint" ref="false">
          <type api="T:IOC.FW.Core.Enumerators" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:IOC.FW.Core.Enumerators.ReferencePoint.BottomLeft">
      <apidata name="BottomLeft" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:IOC.FW.Core.Enumerators.ReferencePoint" ref="false">
          <type api="T:IOC.FW.Core.Enumerators" ref="true" />
        </type>
      </returns>
      <value>7</value>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core" />
        <type api="T:IOC.FW.Core.Enumerators.ReferencePoint" ref="false">
          <type api="T:IOC.FW.Core.Enumerators" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:IOC.FW.Core.Enumerators.ReferencePoint.BottomRight">
      <apidata name="BottomRight" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:IOC.FW.Core.Enumerators.ReferencePoint" ref="false">
          <type api="T:IOC.FW.Core.Enumerators" ref="true" />
        </type>
      </returns>
      <value>9</value>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core" />
        <type api="T:IOC.FW.Core.Enumerators.ReferencePoint" ref="false">
          <type api="T:IOC.FW.Core.Enumerators" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:IOC.FW.Core.Enumerators.ReferencePoint.MiddleCenter">
      <apidata name="MiddleCenter" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:IOC.FW.Core.Enumerators.ReferencePoint" ref="false">
          <type api="T:IOC.FW.Core.Enumerators" ref="true" />
        </type>
      </returns>
      <value>5</value>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core" />
        <type api="T:IOC.FW.Core.Enumerators.ReferencePoint" ref="false">
          <type api="T:IOC.FW.Core.Enumerators" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:IOC.FW.Core.Enumerators.ReferencePoint.MiddleLeft">
      <apidata name="MiddleLeft" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:IOC.FW.Core.Enumerators.ReferencePoint" ref="false">
          <type api="T:IOC.FW.Core.Enumerators" ref="true" />
        </type>
      </returns>
      <value>4</value>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core" />
        <type api="T:IOC.FW.Core.Enumerators.ReferencePoint" ref="false">
          <type api="T:IOC.FW.Core.Enumerators" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:IOC.FW.Core.Enumerators.ReferencePoint.MiddleRight">
      <apidata name="MiddleRight" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:IOC.FW.Core.Enumerators.ReferencePoint" ref="false">
          <type api="T:IOC.FW.Core.Enumerators" ref="true" />
        </type>
      </returns>
      <value>6</value>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core" />
        <type api="T:IOC.FW.Core.Enumerators.ReferencePoint" ref="false">
          <type api="T:IOC.FW.Core.Enumerators" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:IOC.FW.Core.Enumerators.ReferencePoint.TopCenter">
      <apidata name="TopCenter" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:IOC.FW.Core.Enumerators.ReferencePoint" ref="false">
          <type api="T:IOC.FW.Core.Enumerators" ref="true" />
        </type>
      </returns>
      <value>2</value>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core" />
        <type api="T:IOC.FW.Core.Enumerators.ReferencePoint" ref="false">
          <type api="T:IOC.FW.Core.Enumerators" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:IOC.FW.Core.Enumerators.ReferencePoint.TopLeft">
      <apidata name="TopLeft" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:IOC.FW.Core.Enumerators.ReferencePoint" ref="false">
          <type api="T:IOC.FW.Core.Enumerators" ref="true" />
        </type>
      </returns>
      <value>1</value>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core" />
        <type api="T:IOC.FW.Core.Enumerators.ReferencePoint" ref="false">
          <type api="T:IOC.FW.Core.Enumerators" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:IOC.FW.Core.Enumerators.ReferencePoint.TopRight">
      <apidata name="TopRight" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:IOC.FW.Core.Enumerators.ReferencePoint" ref="false">
          <type api="T:IOC.FW.Core.Enumerators" ref="true" />
        </type>
      </returns>
      <value>3</value>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core" />
        <type api="T:IOC.FW.Core.Enumerators.ReferencePoint" ref="false">
          <type api="T:IOC.FW.Core.Enumerators" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:IOC.FW.Core.Extensions">
      <apidata name="Extensions" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:IOC.FW.Core.Extensions.Truncate(System.Double,System.Int32)" />
        <element api="M:IOC.FW.Core.Extensions.RemoveSpecialChars(System.String)" />
        <element api="M:IOC.FW.Core.Extensions.ReplaceSpecialChars(System.String)" />
        <element api="M:IOC.FW.Core.Extensions.PreparePattern(System.String,System.Char,System.String)" />
        <element api="M:IOC.FW.Core.Extensions.Like(System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
        <element api="M:IOC.FW.Core.Extensions.IsImage(System.String)" />
        <element api="M:IOC.FW.Core.Extensions.IsImage(System.IO.Stream)" />
        <element api="M:IOC.FW.Core.Extensions.ValidateIpAddress(System.String,System.String)" />
        <element api="M:IOC.FW.Core.Extensions.StripHtmlTags(System.String)" />
        <element api="M:IOC.FW.Core.Extensions.CleanHtml(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})" />
        <element api="M:IOC.FW.Core.Extensions.EscapeItems(System.Collections.Generic.IList{System.String})" />
        <element api="M:IOC.FW.Core.Extensions.HasElements``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:IOC.FW.Core.Extensions.FisherYates``1(System.Collections.Generic.IList{``0})" />
        <element api="M:IOC.FW.Core.Extensions.FisherYates``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)" />
        <element api="M:IOC.FW.Core.Extensions.Shuffle``1(System.Collections.Generic.IList{``0})" />
        <element api="M:IOC.FW.Core.Extensions.ToQueryString``1(System.Collections.Generic.IDictionary{System.String,``0})" />
        <element api="M:IOC.FW.Core.Extensions.GetMimeType(System.Drawing.Imaging.ImageFormat)" />
        <element api="M:IOC.FW.Core.Extensions.RandomNext(System.Random,System.Int32,System.Int32)" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:IOC.FW.Core.Extensions.CleanHtml(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
      <apidata name="CleanHtml" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="source">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="allowedTags">
          <type api="T:System.Collections.Generic.IList`1" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="allowedAttrs">
          <type api="T:System.Collections.Generic.IList`1" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core" />
        <type api="T:IOC.FW.Core.Extensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:IOC.FW.Core.Extensions.EscapeItems(System.Collections.Generic.IList{System.String})">
      <apidata name="EscapeItems" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="items">
          <type api="T:System.Collections.Generic.IList`1" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IList`1" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core" />
        <type api="T:IOC.FW.Core.Extensions" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Extensions.FisherYates``1(System.Collections.Generic.IList{``0})">
      <apidata name="FisherYates" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="list">
          <type api="T:System.Collections.Generic.IList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:IOC.FW.Core.Extensions.FisherYates``1(System.Collections.Generic.IList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:IOC.FW.Core.Extensions.FisherYates``1(System.Collections.Generic.IList{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core" />
        <type api="T:IOC.FW.Core.Extensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:IOC.FW.Core.Extensions.FisherYates``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
      <apidata name="FisherYates" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="list">
          <type api="T:System.Collections.Generic.IList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:IOC.FW.Core.Extensions.FisherYates``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)" />
            </specialization>
          </type>
        </parameter>
        <parameter name="startIndex">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="count">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:IOC.FW.Core.Extensions.FisherYates``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core" />
        <type api="T:IOC.FW.Core.Extensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:IOC.FW.Core.Extensions.GetMimeType(System.Drawing.Imaging.ImageFormat)">
      <apidata name="GetMimeType" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="imageFormat">
          <type api="T:System.Drawing.Imaging.ImageFormat" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core" />
        <type api="T:IOC.FW.Core.Extensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:IOC.FW.Core.Extensions.HasElements``1(System.Collections.Generic.IEnumerable{``0})">
      <apidata name="HasElements" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="list">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:IOC.FW.Core.Extensions.HasElements``1(System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core" />
        <type api="T:IOC.FW.Core.Extensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:IOC.FW.Core.Extensions.IsImage(System.IO.Stream)">
      <apidata name="IsImage" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="stream">
          <type api="T:System.IO.Stream" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core" />
        <type api="T:IOC.FW.Core.Extensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:IOC.FW.Core.Extensions.IsImage(System.String)">
      <apidata name="IsImage" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="image">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core" />
        <type api="T:IOC.FW.Core.Extensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:IOC.FW.Core.Extensions.Like(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <apidata name="Like" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="text">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="pattern">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="options" optional="true">
          <type api="T:System.Text.RegularExpressions.RegexOptions" ref="false" />
          <argument>
            <type api="T:System.Text.RegularExpressions.RegexOptions" ref="false" />
            <enumValue>
              <field name="IgnoreCase" />
            </enumValue>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core" />
        <type api="T:IOC.FW.Core.Extensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:IOC.FW.Core.Extensions.PreparePattern(System.String,System.Char,System.String)">
      <apidata name="PreparePattern" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="text">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="charSplitter">
          <type api="T:System.Char" ref="false" />
        </parameter>
        <parameter name="likeCommand">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core" />
        <type api="T:IOC.FW.Core.Extensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:IOC.FW.Core.Extensions.RandomNext(System.Random,System.Int32,System.Int32)">
      <apidata name="RandomNext" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="randomizer">
          <type api="T:System.Random" ref="true" />
        </parameter>
        <parameter name="minValue">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="maxValue">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core" />
        <type api="T:IOC.FW.Core.Extensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:IOC.FW.Core.Extensions.RemoveSpecialChars(System.String)">
      <apidata name="RemoveSpecialChars" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="dirtyString">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core" />
        <type api="T:IOC.FW.Core.Extensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:IOC.FW.Core.Extensions.ReplaceSpecialChars(System.String)">
      <apidata name="ReplaceSpecialChars" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="dirtyString">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core" />
        <type api="T:IOC.FW.Core.Extensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:IOC.FW.Core.Extensions.Shuffle``1(System.Collections.Generic.IList{``0})">
      <apidata name="Shuffle" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="list">
          <type api="T:System.Collections.Generic.IList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:IOC.FW.Core.Extensions.Shuffle``1(System.Collections.Generic.IList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core" />
        <type api="T:IOC.FW.Core.Extensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:IOC.FW.Core.Extensions.StripHtmlTags(System.String)">
      <apidata name="StripHtmlTags" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="source">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core" />
        <type api="T:IOC.FW.Core.Extensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:IOC.FW.Core.Extensions.ToQueryString``1(System.Collections.Generic.IDictionary{System.String,``0})">
      <apidata name="ToQueryString" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TValue" />
      </templates>
      <parameters>
        <parameter name="dict">
          <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
              <template name="TValue" index="0" api="M:IOC.FW.Core.Extensions.ToQueryString``1(System.Collections.Generic.IDictionary{System.String,``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core" />
        <type api="T:IOC.FW.Core.Extensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:IOC.FW.Core.Extensions.Truncate(System.Double,System.Int32)">
      <apidata name="Truncate" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="value">
          <type api="T:System.Double" ref="false" />
        </parameter>
        <parameter name="decimalPlaces">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Double" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core" />
        <type api="T:IOC.FW.Core.Extensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:IOC.FW.Core.Extensions.ValidateIpAddress(System.String,System.String)">
      <apidata name="ValidateIpAddress" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="clientIp">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="serverVariable">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core" />
        <type api="T:IOC.FW.Core.Extensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="N:IOC.FW.Core.Abstraction.Binding">
      <apidata name="IOC.FW.Core.Abstraction.Binding" group="namespace" />
      <elements>
        <element api="T:IOC.FW.Core.Abstraction.Binding.IModule" />
      </elements>
    </api>
    <api id="T:IOC.FW.Core.Abstraction.Binding.IModule">
      <apidata name="IModule" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:IOC.FW.Core.Abstraction.Binding.IModule.SetBinding(SimpleInjector.Container)" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.Binding" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Abstraction.Binding.IModule.SetBinding(SimpleInjector.Container)">
      <apidata name="SetBinding" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="container">
          <type api="T:SimpleInjector.Container" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.Binding" />
        <type api="T:IOC.FW.Core.Abstraction.Binding.IModule" ref="true" />
      </containers>
    </api>
    <api id="N:IOC.FW.Core.Abstraction.Business">
      <apidata name="IOC.FW.Core.Abstraction.Business" group="namespace" />
      <elements>
        <element api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" />
      </elements>
    </api>
    <api id="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1">
      <apidata name="IBaseBusiness" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TModel">
          <constrained ref="true" ctor="true" />
        </template>
      </templates>
      <implementors>
        <type api="T:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1" ref="true" />
        <type api="T:IOC.FW.Core.Base.BaseBusiness`1" ref="true" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </implementors>
      <elements>
        <element api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.Model" />
        <element api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.List" />
        <element api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.SelectAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])" />
        <element api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])" />
        <element api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.SelectSingle(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])" />
        <element api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.Insert(`0[])" />
        <element api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.Update(`0[])" />
        <element api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.Delete(`0[])" />
        <element api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.UpdatePriority``1(``0[])" />
        <element api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.Count" />
        <element api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})" />
        <element api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.LongCount" />
        <element api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.Business" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.Count">
      <apidata name="Count" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.Business" />
        <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
      <apidata name="Count" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="where">
          <type api="T:System.Linq.Expressions.Expression`1" ref="true">
            <specialization>
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TModel" index="0" api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.Business" />
        <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.Delete(`0[])">
      <apidata name="Delete" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="items" params="true">
          <arrayOf rank="1">
            <template name="TModel" index="0" api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.Business" />
        <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.Insert(`0[])">
      <apidata name="Insert" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="items" params="true">
          <arrayOf rank="1">
            <template name="TModel" index="0" api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.Business" />
        <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.List">
      <apidata name="List" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <template name="TModel" index="0" api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.Business" />
        <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.LongCount">
      <apidata name="LongCount" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.Business" />
        <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
      <apidata name="LongCount" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="where">
          <type api="T:System.Linq.Expressions.Expression`1" ref="true">
            <specialization>
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TModel" index="0" api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.Business" />
        <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.Model">
      <apidata name="Model" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <template name="TModel" index="0" api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.Business" />
        <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
      <apidata name="Select" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="where">
          <type api="T:System.Linq.Expressions.Expression`1" ref="true">
            <specialization>
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TModel" index="0" api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="navigationProperties" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression`1" ref="true">
              <specialization>
                <type api="T:System.Func`2" ref="true">
                  <specialization>
                    <template name="TModel" index="0" api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IList`1" ref="true">
          <specialization>
            <template name="TModel" index="0" api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.Business" />
        <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.SelectAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
      <apidata name="SelectAll" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="navigationProperties" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression`1" ref="true">
              <specialization>
                <type api="T:System.Func`2" ref="true">
                  <specialization>
                    <template name="TModel" index="0" api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IList`1" ref="true">
          <specialization>
            <template name="TModel" index="0" api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.Business" />
        <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.SelectSingle(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
      <apidata name="SelectSingle" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="where">
          <type api="T:System.Linq.Expressions.Expression`1" ref="true">
            <specialization>
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TModel" index="0" api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="navigationProperties" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression`1" ref="true">
              <specialization>
                <type api="T:System.Func`2" ref="true">
                  <specialization>
                    <template name="TModel" index="0" api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <template name="TModel" index="0" api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.Business" />
        <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.Update(`0[])">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="items" params="true">
          <arrayOf rank="1">
            <template name="TModel" index="0" api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.Business" />
        <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.UpdatePriority``1(``0[])">
      <apidata name="UpdatePriority" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <templates>
        <template name="TPriorityModel">
          <constrained>
            <implements>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" />
              <type api="T:IOC.FW.Core.Abstraction.Miscellanous.IPrioritySortable" ref="true" />
            </implements>
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="items" params="true">
          <arrayOf rank="1">
            <template name="TPriorityModel" index="0" api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.UpdatePriority``1(``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.Business" />
        <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true" />
      </containers>
    </api>
    <api id="N:IOC.FW.Core.Abstraction.DAO">
      <apidata name="IOC.FW.Core.Abstraction.DAO" group="namespace" />
      <elements>
        <element api="T:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1" />
      </elements>
    </api>
    <api id="T:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1">
      <apidata name="IBaseDAO" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TModel">
          <constrained ref="true" ctor="true" />
        </template>
      </templates>
      <implements>
        <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true">
          <specialization>
            <template name="TModel" index="0" api="T:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1" />
          </specialization>
        </type>
      </implements>
      <implementors>
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </implementors>
      <elements>
        <element api="M:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1.ExecuteQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType)" />
        <element api="M:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1.ExecuteQuery(System.String,System.Collections.Generic.List{System.Tuple{System.Data.ParameterDirection,System.String,System.Object}},System.Data.CommandType)" />
        <element api="M:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1.ExecuteScalar(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType)" />
        <element api="M:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1.Exec(System.Func{System.Data.Entity.DbSet{`0},`0})" />
        <element api="M:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1.Exec``1(System.Func{System.Data.Entity.DbSet{``0},``0})" />
        <element api="M:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1.Exec``2(System.Func{System.Data.Entity.DbSet{``0},``1})" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.DAO" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1.Exec``1(System.Func{System.Data.Entity.DbSet{``0},``0})">
      <apidata name="Exec" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <templates>
        <template name="TGenericModel">
          <constrained ref="true" ctor="true" />
        </template>
      </templates>
      <parameters>
        <parameter name="lambda">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <type api="T:System.Data.Entity.DbSet`1" ref="true">
                <specialization>
                  <template name="TGenericModel" index="0" api="M:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1.Exec``1(System.Func{System.Data.Entity.DbSet{``0},``0})" />
                </specialization>
              </type>
              <template name="TGenericModel" index="0" api="M:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1.Exec``1(System.Func{System.Data.Entity.DbSet{``0},``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TGenericModel" index="0" api="M:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1.Exec``1(System.Func{System.Data.Entity.DbSet{``0},``0})" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.DAO" />
        <type api="T:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1.Exec``2(System.Func{System.Data.Entity.DbSet{``0},``1})">
      <apidata name="Exec" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <templates>
        <template name="TGenericModel">
          <constrained ref="true" ctor="true" />
        </template>
        <template name="TGenericModeOut" />
      </templates>
      <parameters>
        <parameter name="lambda">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <type api="T:System.Data.Entity.DbSet`1" ref="true">
                <specialization>
                  <template name="TGenericModel" index="0" api="M:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1.Exec``2(System.Func{System.Data.Entity.DbSet{``0},``1})" />
                </specialization>
              </type>
              <template name="TGenericModeOut" index="1" api="M:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1.Exec``2(System.Func{System.Data.Entity.DbSet{``0},``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TGenericModeOut" index="1" api="M:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1.Exec``2(System.Func{System.Data.Entity.DbSet{``0},``1})" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.DAO" />
        <type api="T:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1.Exec(System.Func{System.Data.Entity.DbSet{`0},`0})">
      <apidata name="Exec" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="lambda">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <type api="T:System.Data.Entity.DbSet`1" ref="true">
                <specialization>
                  <template name="TModel" index="0" api="T:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1" />
                </specialization>
              </type>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TModel" index="0" api="T:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.DAO" />
        <type api="T:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1.ExecuteQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType)">
      <apidata name="ExecuteQuery" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="sql">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="parameters">
          <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:System.Object" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="cmdType" optional="true">
          <type api="T:System.Data.CommandType" ref="false" />
          <argument>
            <type api="T:System.Data.CommandType" ref="false" />
            <enumValue>
              <field name="Text" />
            </enumValue>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IList`1" ref="true">
          <specialization>
            <template name="TModel" index="0" api="T:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.DAO" />
        <type api="T:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1.ExecuteQuery(System.String,System.Collections.Generic.List{System.Tuple{System.Data.ParameterDirection,System.String,System.Object}},System.Data.CommandType)">
      <apidata name="ExecuteQuery" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="sql">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="parametersWithDirection">
          <type api="T:System.Collections.Generic.List`1" ref="true">
            <specialization>
              <type api="T:System.Tuple`3" ref="true">
                <specialization>
                  <type api="T:System.Data.ParameterDirection" ref="false" />
                  <type api="T:System.String" ref="true" />
                  <type api="T:System.Object" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="cmdType">
          <type api="T:System.Data.CommandType" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IList`1" ref="true">
          <specialization>
            <template name="TModel" index="0" api="T:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.DAO" />
        <type api="T:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1.ExecuteScalar(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType)">
      <apidata name="ExecuteScalar" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="sql">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="parameters" optional="true">
          <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:System.Object" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="cmdType" optional="true">
          <type api="T:System.Data.CommandType" ref="false" />
          <argument>
            <type api="T:System.Data.CommandType" ref="false" />
            <enumValue>
              <field name="Text" />
            </enumValue>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.DAO" />
        <type api="T:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1" ref="true" />
      </containers>
    </api>
    <api id="N:IOC.FW.Core.Abstraction.Factory">
      <apidata name="IOC.FW.Core.Abstraction.Factory" group="namespace" />
      <elements>
        <element api="T:IOC.FW.Core.Abstraction.Factory.IInjectionModule`1" />
      </elements>
    </api>
    <api id="T:IOC.FW.Core.Abstraction.Factory.IInjectionModule`1">
      <apidata name="IInjectionModule" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="T">
          <constrained ref="true" />
        </template>
      </templates>
      <implementors>
        <type api="T:IOC.FW.Core.Factory.SimpleInjectionModule" ref="true" />
      </implementors>
      <elements>
        <element api="P:IOC.FW.Core.Abstraction.Factory.IInjectionModule`1.container" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.Factory" />
      </containers>
    </api>
    <api id="P:IOC.FW.Core.Abstraction.Factory.IInjectionModule`1.container">
      <apidata name="container" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_container" />
      <setter name="set_container" />
      <returns>
        <template name="T" index="0" api="T:IOC.FW.Core.Abstraction.Factory.IInjectionModule`1" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.Factory" />
        <type api="T:IOC.FW.Core.Abstraction.Factory.IInjectionModule`1" ref="true" />
      </containers>
    </api>
    <api id="N:IOC.FW.Core.Abstraction.Miscellanous">
      <apidata name="IOC.FW.Core.Abstraction.Miscellanous" group="namespace" />
      <elements>
        <element api="T:IOC.FW.Core.Abstraction.Miscellanous.IPrioritySortable" />
      </elements>
    </api>
    <api id="T:IOC.FW.Core.Abstraction.Miscellanous.IPrioritySortable">
      <apidata name="IPrioritySortable" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:IOC.FW.Core.Abstraction.Miscellanous.IPrioritySortable.Priority" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.Miscellanous" />
      </containers>
    </api>
    <api id="P:IOC.FW.Core.Abstraction.Miscellanous.IPrioritySortable.Priority">
      <apidata name="Priority" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Priority" />
      <setter name="set_Priority" />
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.Miscellanous" />
        <type api="T:IOC.FW.Core.Abstraction.Miscellanous.IPrioritySortable" ref="true" />
      </containers>
    </api>
    <api id="N:IOC.FW.Core.Abstraction.Model">
      <apidata name="IOC.FW.Core.Abstraction.Model" group="namespace" />
      <elements>
        <element api="T:IOC.FW.Core.Abstraction.Model.IBaseModel" />
        <element api="T:IOC.FW.Core.Abstraction.Model.IModelCreating" />
      </elements>
    </api>
    <api id="T:IOC.FW.Core.Abstraction.Model.IBaseModel">
      <apidata name="IBaseModel" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="P:IOC.FW.Core.Abstraction.Model.IBaseModel.Created" />
        <element api="P:IOC.FW.Core.Abstraction.Model.IBaseModel.Updated" />
        <element api="P:IOC.FW.Core.Abstraction.Model.IBaseModel.Activated" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.Model" />
      </containers>
    </api>
    <api id="P:IOC.FW.Core.Abstraction.Model.IBaseModel.Activated">
      <apidata name="Activated" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Activated" />
      <setter name="set_Activated" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.Model" />
        <type api="T:IOC.FW.Core.Abstraction.Model.IBaseModel" ref="true" />
      </containers>
    </api>
    <api id="P:IOC.FW.Core.Abstraction.Model.IBaseModel.Created">
      <apidata name="Created" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Created" />
      <setter name="set_Created" />
      <returns>
        <type api="T:System.DateTime" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.Model" />
        <type api="T:IOC.FW.Core.Abstraction.Model.IBaseModel" ref="true" />
      </containers>
    </api>
    <api id="P:IOC.FW.Core.Abstraction.Model.IBaseModel.Updated">
      <apidata name="Updated" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" set="true" />
      <getter name="get_Updated" />
      <setter name="set_Updated" />
      <returns>
        <type api="T:System.Nullable`1" ref="false">
          <specialization>
            <type api="T:System.DateTime" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.Model" />
        <type api="T:IOC.FW.Core.Abstraction.Model.IBaseModel" ref="true" />
      </containers>
    </api>
    <api id="T:IOC.FW.Core.Abstraction.Model.IModelCreating">
      <apidata name="IModelCreating" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <elements>
        <element api="M:IOC.FW.Core.Abstraction.Model.IModelCreating.OnCreating(System.Data.Entity.DbModelBuilder)" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.Model" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Abstraction.Model.IModelCreating.OnCreating(System.Data.Entity.DbModelBuilder)">
      <apidata name="OnCreating" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="modelBuilder">
          <type api="T:System.Data.Entity.DbModelBuilder" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Abstraction.Model" />
        <type api="T:IOC.FW.Core.Abstraction.Model.IModelCreating" ref="true" />
      </containers>
    </api>
    <api id="N:IOC.FW.Core.Base">
      <apidata name="IOC.FW.Core.Base" group="namespace" />
      <elements>
        <element api="T:IOC.FW.Core.Base.BaseBusiness`1" />
        <element api="T:IOC.FW.Core.Base.BaseRepository`1" />
        <element api="T:IOC.FW.Core.Base.BasicAuthenticationIdentity" />
        <element api="T:IOC.FW.Core.Base.BaseModel" />
        <element api="T:IOC.FW.Core.Base.BaseModel`1" />
      </elements>
    </api>
    <api id="T:IOC.FW.Core.Base.BaseBusiness`1">
      <apidata name="BaseBusiness" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TModel">
          <constrained ref="true" ctor="true" />
        </template>
      </templates>
      <implements>
        <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true">
          <specialization>
            <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseBusiness`1" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="M:IOC.FW.Core.Base.BaseBusiness`1.Model" />
        <element api="M:IOC.FW.Core.Base.BaseBusiness`1.List" />
        <element api="M:IOC.FW.Core.Base.BaseBusiness`1.#ctor(IOC.FW.Core.Abstraction.DAO.IBaseDAO{`0})" />
        <element api="M:IOC.FW.Core.Base.BaseBusiness`1.SelectAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])" />
        <element api="M:IOC.FW.Core.Base.BaseBusiness`1.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])" />
        <element api="M:IOC.FW.Core.Base.BaseBusiness`1.SelectSingle(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])" />
        <element api="M:IOC.FW.Core.Base.BaseBusiness`1.Insert(`0[])" />
        <element api="M:IOC.FW.Core.Base.BaseBusiness`1.Update(`0[])" />
        <element api="M:IOC.FW.Core.Base.BaseBusiness`1.Delete(`0[])" />
        <element api="M:IOC.FW.Core.Base.BaseBusiness`1.UpdatePriority``1(``0[])" />
        <element api="M:IOC.FW.Core.Base.BaseBusiness`1.Count" />
        <element api="M:IOC.FW.Core.Base.BaseBusiness`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})" />
        <element api="M:IOC.FW.Core.Base.BaseBusiness`1.LongCount" />
        <element api="M:IOC.FW.Core.Base.BaseBusiness`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseBusiness`1.#ctor(IOC.FW.Core.Abstraction.DAO.IBaseDAO{`0})">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="dao">
          <type api="T:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseBusiness`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseBusiness`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseBusiness`1.Count">
      <apidata name="Count" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.Count">
          <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseBusiness`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseBusiness`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseBusiness`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
      <apidata name="Count" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="where">
          <type api="T:System.Linq.Expressions.Expression`1" ref="true">
            <specialization>
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseBusiness`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
          <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseBusiness`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseBusiness`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseBusiness`1.Delete(`0[])">
      <apidata name="Delete" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="items" params="true">
          <arrayOf rank="1">
            <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseBusiness`1" />
          </arrayOf>
        </parameter>
      </parameters>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.Delete(`0[])">
          <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseBusiness`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseBusiness`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseBusiness`1.Insert(`0[])">
      <apidata name="Insert" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="items" params="true">
          <arrayOf rank="1">
            <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseBusiness`1" />
          </arrayOf>
        </parameter>
      </parameters>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.Insert(`0[])">
          <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseBusiness`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseBusiness`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseBusiness`1.List">
      <apidata name="List" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseBusiness`1" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.List">
          <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseBusiness`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseBusiness`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseBusiness`1.LongCount">
      <apidata name="LongCount" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.LongCount">
          <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseBusiness`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseBusiness`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseBusiness`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
      <apidata name="LongCount" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="where">
          <type api="T:System.Linq.Expressions.Expression`1" ref="true">
            <specialization>
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseBusiness`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
          <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseBusiness`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseBusiness`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseBusiness`1.Model">
      <apidata name="Model" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseBusiness`1" />
      </returns>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.Model">
          <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseBusiness`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseBusiness`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseBusiness`1.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
      <apidata name="Select" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="where">
          <type api="T:System.Linq.Expressions.Expression`1" ref="true">
            <specialization>
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseBusiness`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="navigationProperties" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression`1" ref="true">
              <specialization>
                <type api="T:System.Func`2" ref="true">
                  <specialization>
                    <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseBusiness`1" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IList`1" ref="true">
          <specialization>
            <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseBusiness`1" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
          <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseBusiness`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseBusiness`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseBusiness`1.SelectAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
      <apidata name="SelectAll" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="navigationProperties" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression`1" ref="true">
              <specialization>
                <type api="T:System.Func`2" ref="true">
                  <specialization>
                    <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseBusiness`1" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IList`1" ref="true">
          <specialization>
            <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseBusiness`1" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.SelectAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
          <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseBusiness`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseBusiness`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseBusiness`1.SelectSingle(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
      <apidata name="SelectSingle" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="where">
          <type api="T:System.Linq.Expressions.Expression`1" ref="true">
            <specialization>
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseBusiness`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="navigationProperties" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression`1" ref="true">
              <specialization>
                <type api="T:System.Func`2" ref="true">
                  <specialization>
                    <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseBusiness`1" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseBusiness`1" />
      </returns>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.SelectSingle(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
          <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseBusiness`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseBusiness`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseBusiness`1.Update(`0[])">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="items" params="true">
          <arrayOf rank="1">
            <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseBusiness`1" />
          </arrayOf>
        </parameter>
      </parameters>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.Update(`0[])">
          <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseBusiness`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseBusiness`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseBusiness`1.UpdatePriority``1(``0[])">
      <apidata name="UpdatePriority" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <templates>
        <template name="TPriorityModel">
          <constrained>
            <implements>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseBusiness`1" />
              <type api="T:IOC.FW.Core.Abstraction.Miscellanous.IPrioritySortable" ref="true" />
            </implements>
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="items" params="true">
          <arrayOf rank="1">
            <template name="TPriorityModel" index="0" api="M:IOC.FW.Core.Base.BaseBusiness`1.UpdatePriority``1(``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.UpdatePriority``1(``0[])">
          <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseBusiness`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseBusiness`1" ref="true" />
      </containers>
    </api>
    <api id="T:IOC.FW.Core.Base.BaseModel">
      <apidata name="BaseModel" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:IOC.FW.Core.Base.BaseModel.#ctor" />
        <element api="P:IOC.FW.Core.Base.BaseModel.IdOp" />
        <element api="P:IOC.FW.Core.Base.BaseModel.Message" />
        <element api="P:IOC.FW.Core.Base.BaseModel.Success" />
        <element api="P:IOC.FW.Core.Base.BaseModel.Data" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseModel.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseModel" ref="true" />
      </containers>
    </api>
    <api id="P:IOC.FW.Core.Base.BaseModel.Data">
      <apidata name="Data" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Data" />
      <setter name="set_Data" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseModel" ref="true" />
      </containers>
    </api>
    <api id="P:IOC.FW.Core.Base.BaseModel.IdOp">
      <apidata name="IdOp" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IdOp" />
      <setter name="set_IdOp" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseModel" ref="true" />
      </containers>
    </api>
    <api id="P:IOC.FW.Core.Base.BaseModel.Message">
      <apidata name="Message" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Message" />
      <setter name="set_Message" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseModel" ref="true" />
      </containers>
    </api>
    <api id="P:IOC.FW.Core.Base.BaseModel.Success">
      <apidata name="Success" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Success" />
      <setter name="set_Success" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseModel" ref="true" />
      </containers>
    </api>
    <api id="T:IOC.FW.Core.Base.BaseModel`1">
      <apidata name="BaseModel" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TModel" />
      </templates>
      <elements>
        <element api="M:IOC.FW.Core.Base.BaseModel`1.#ctor" />
        <element api="P:IOC.FW.Core.Base.BaseModel`1.IdOp" />
        <element api="P:IOC.FW.Core.Base.BaseModel`1.Message" />
        <element api="P:IOC.FW.Core.Base.BaseModel`1.Success" />
        <element api="P:IOC.FW.Core.Base.BaseModel`1.Data" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseModel`1.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseModel`1" ref="true" />
      </containers>
    </api>
    <api id="P:IOC.FW.Core.Base.BaseModel`1.Data">
      <apidata name="Data" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Data" />
      <setter name="set_Data" />
      <returns>
        <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseModel`1" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseModel`1" ref="true" />
      </containers>
    </api>
    <api id="P:IOC.FW.Core.Base.BaseModel`1.IdOp">
      <apidata name="IdOp" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_IdOp" />
      <setter name="set_IdOp" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseModel`1" ref="true" />
      </containers>
    </api>
    <api id="P:IOC.FW.Core.Base.BaseModel`1.Message">
      <apidata name="Message" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Message" />
      <setter name="set_Message" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseModel`1" ref="true" />
      </containers>
    </api>
    <api id="P:IOC.FW.Core.Base.BaseModel`1.Success">
      <apidata name="Success" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Success" />
      <setter name="set_Success" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseModel`1" ref="true" />
      </containers>
    </api>
    <api id="T:IOC.FW.Core.Base.BaseRepository`1">
      <apidata name="BaseRepository" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TModel">
          <constrained ref="true" ctor="true" />
        </template>
      </templates>
      <implements>
        <type api="T:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1" ref="true">
          <specialization>
            <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
          </specialization>
        </type>
        <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true">
          <specialization>
            <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="M:IOC.FW.Core.Base.BaseRepository`1.#ctor" />
        <element api="M:IOC.FW.Core.Base.BaseRepository`1.SetConnection(System.String)" />
        <element api="M:IOC.FW.Core.Base.BaseRepository`1.IncludeReference(System.Data.Entity.DbSet{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])" />
        <element api="M:IOC.FW.Core.Base.BaseRepository`1.SelectAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])" />
        <element api="M:IOC.FW.Core.Base.BaseRepository`1.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])" />
        <element api="M:IOC.FW.Core.Base.BaseRepository`1.SelectSingle(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])" />
        <element api="M:IOC.FW.Core.Base.BaseRepository`1.Insert(`0[])" />
        <element api="M:IOC.FW.Core.Base.BaseRepository`1.InsertToContext(`0[],IOC.FW.Core.Database.Repository{`0})" />
        <element api="M:IOC.FW.Core.Base.BaseRepository`1.Update(`0[])" />
        <element api="M:IOC.FW.Core.Base.BaseRepository`1.UpdateToContext(`0[],IOC.FW.Core.Database.Repository{`0})" />
        <element api="M:IOC.FW.Core.Base.BaseRepository`1.Delete(`0[])" />
        <element api="M:IOC.FW.Core.Base.BaseRepository`1.ExecuteQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType)" />
        <element api="M:IOC.FW.Core.Base.BaseRepository`1.ExecuteQuery(System.String,System.Collections.Generic.List{System.Tuple{System.Data.ParameterDirection,System.String,System.Object}},System.Data.CommandType)" />
        <element api="M:IOC.FW.Core.Base.BaseRepository`1.ExecuteScalar(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType)" />
        <element api="M:IOC.FW.Core.Base.BaseRepository`1.Exec(System.Func{System.Data.Entity.DbSet{`0},`0})" />
        <element api="M:IOC.FW.Core.Base.BaseRepository`1.Exec``1(System.Func{System.Data.Entity.DbSet{``0},``0})" />
        <element api="M:IOC.FW.Core.Base.BaseRepository`1.Exec``2(System.Func{System.Data.Entity.DbSet{``0},``1})" />
        <element api="M:IOC.FW.Core.Base.BaseRepository`1.OpenConnection(IOC.FW.Core.Database.Repository{`0})" />
        <element api="M:IOC.FW.Core.Base.BaseRepository`1.CreateCommand(System.Data.Common.DbConnection,System.String,System.Data.CommandType)" />
        <element api="M:IOC.FW.Core.Base.BaseRepository`1.SetParameter(System.Data.Common.DbCommand,System.Collections.Generic.Dictionary{System.String,System.Object})" />
        <element api="M:IOC.FW.Core.Base.BaseRepository`1.SetParameter(System.Data.Common.DbCommand,System.Collections.Generic.List{System.Tuple{System.Data.ParameterDirection,System.String,System.Object}})" />
        <element api="M:IOC.FW.Core.Base.BaseRepository`1.UpdatePriority``1(``0[])" />
        <element api="M:IOC.FW.Core.Base.BaseRepository`1.FindKeyProperty(`0)" />
        <element api="M:IOC.FW.Core.Base.BaseRepository`1.Model" />
        <element api="M:IOC.FW.Core.Base.BaseRepository`1.List" />
        <element api="M:IOC.FW.Core.Base.BaseRepository`1.Count" />
        <element api="M:IOC.FW.Core.Base.BaseRepository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})" />
        <element api="M:IOC.FW.Core.Base.BaseRepository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IOC.FW.Core.Database.Repository{`0})" />
        <element api="M:IOC.FW.Core.Base.BaseRepository`1.LongCount" />
        <element api="M:IOC.FW.Core.Base.BaseRepository`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})" />
        <element api="M:IOC.FW.Core.Base.BaseRepository`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IOC.FW.Core.Database.Repository{`0})" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseRepository`1.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseRepository`1.Count">
      <apidata name="Count" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.Count">
          <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseRepository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
      <apidata name="Count" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="where">
          <type api="T:System.Linq.Expressions.Expression`1" ref="true">
            <specialization>
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
          <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseRepository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IOC.FW.Core.Database.Repository{`0})">
      <apidata name="Count" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="where">
          <type api="T:System.Linq.Expressions.Expression`1" ref="true">
            <specialization>
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="context">
          <type api="T:IOC.FW.Core.Database.Repository`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseRepository`1.CreateCommand(System.Data.Common.DbConnection,System.String,System.Data.CommandType)">
      <apidata name="CreateCommand" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="conn">
          <type api="T:System.Data.Common.DbConnection" ref="true" />
        </parameter>
        <parameter name="sql">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="cmdType" optional="true">
          <type api="T:System.Data.CommandType" ref="false" />
          <argument>
            <type api="T:System.Data.CommandType" ref="false" />
            <enumValue>
              <field name="Text" />
            </enumValue>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Data.Common.DbCommand" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseRepository`1.Delete(`0[])">
      <apidata name="Delete" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="items" params="true">
          <arrayOf rank="1">
            <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
          </arrayOf>
        </parameter>
      </parameters>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.Delete(`0[])">
          <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseRepository`1.Exec``1(System.Func{System.Data.Entity.DbSet{``0},``0})">
      <apidata name="Exec" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <templates>
        <template name="TGenericModel">
          <constrained ref="true" ctor="true" />
        </template>
      </templates>
      <parameters>
        <parameter name="lambda">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <type api="T:System.Data.Entity.DbSet`1" ref="true">
                <specialization>
                  <template name="TGenericModel" index="0" api="M:IOC.FW.Core.Base.BaseRepository`1.Exec``1(System.Func{System.Data.Entity.DbSet{``0},``0})" />
                </specialization>
              </type>
              <template name="TGenericModel" index="0" api="M:IOC.FW.Core.Base.BaseRepository`1.Exec``1(System.Func{System.Data.Entity.DbSet{``0},``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TGenericModel" index="0" api="M:IOC.FW.Core.Base.BaseRepository`1.Exec``1(System.Func{System.Data.Entity.DbSet{``0},``0})" />
      </returns>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1.Exec(System.Func{System.Data.Entity.DbSet{`0},`0})">
          <type api="T:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseRepository`1.Exec``2(System.Func{System.Data.Entity.DbSet{``0},``1})">
      <apidata name="Exec" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <templates>
        <template name="TGenericModel">
          <constrained ref="true" ctor="true" />
        </template>
        <template name="TGenericModeOut" />
      </templates>
      <parameters>
        <parameter name="lambda">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <type api="T:System.Data.Entity.DbSet`1" ref="true">
                <specialization>
                  <template name="TGenericModel" index="0" api="M:IOC.FW.Core.Base.BaseRepository`1.Exec``2(System.Func{System.Data.Entity.DbSet{``0},``1})" />
                </specialization>
              </type>
              <template name="TGenericModeOut" index="1" api="M:IOC.FW.Core.Base.BaseRepository`1.Exec``2(System.Func{System.Data.Entity.DbSet{``0},``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TGenericModeOut" index="1" api="M:IOC.FW.Core.Base.BaseRepository`1.Exec``2(System.Func{System.Data.Entity.DbSet{``0},``1})" />
      </returns>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1.Exec(System.Func{System.Data.Entity.DbSet{`0},`0})">
          <type api="T:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseRepository`1.Exec(System.Func{System.Data.Entity.DbSet{`0},`0})">
      <apidata name="Exec" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="lambda">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <type api="T:System.Data.Entity.DbSet`1" ref="true">
                <specialization>
                  <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
                </specialization>
              </type>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
      </returns>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1.Exec(System.Func{System.Data.Entity.DbSet{`0},`0})">
          <type api="T:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseRepository`1.ExecuteQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType)">
      <apidata name="ExecuteQuery" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="sql">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="parameters" optional="true">
          <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:System.Object" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="cmdType" optional="true">
          <type api="T:System.Data.CommandType" ref="false" />
          <argument>
            <type api="T:System.Data.CommandType" ref="false" />
            <enumValue>
              <field name="Text" />
            </enumValue>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IList`1" ref="true">
          <specialization>
            <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1.ExecuteQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType)">
          <type api="T:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseRepository`1.ExecuteQuery(System.String,System.Collections.Generic.List{System.Tuple{System.Data.ParameterDirection,System.String,System.Object}},System.Data.CommandType)">
      <apidata name="ExecuteQuery" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="sql">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="parametersWithDirection">
          <type api="T:System.Collections.Generic.List`1" ref="true">
            <specialization>
              <type api="T:System.Tuple`3" ref="true">
                <specialization>
                  <type api="T:System.Data.ParameterDirection" ref="false" />
                  <type api="T:System.String" ref="true" />
                  <type api="T:System.Object" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="cmdType">
          <type api="T:System.Data.CommandType" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IList`1" ref="true">
          <specialization>
            <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1.ExecuteQuery(System.String,System.Collections.Generic.List{System.Tuple{System.Data.ParameterDirection,System.String,System.Object}},System.Data.CommandType)">
          <type api="T:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseRepository`1.ExecuteScalar(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType)">
      <apidata name="ExecuteScalar" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="sql">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="parameters" optional="true">
          <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:System.Object" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="cmdType" optional="true">
          <type api="T:System.Data.CommandType" ref="false" />
          <argument>
            <type api="T:System.Data.CommandType" ref="false" />
            <enumValue>
              <field name="Text" />
            </enumValue>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1.ExecuteScalar(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType)">
          <type api="T:IOC.FW.Core.Abstraction.DAO.IBaseDAO`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseRepository`1.FindKeyProperty(`0)">
      <apidata name="FindKeyProperty" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="item">
          <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Reflection.PropertyInfo" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseRepository`1.IncludeReference(System.Data.Entity.DbSet{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
      <apidata name="IncludeReference" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="dbSet">
          <type api="T:System.Data.Entity.DbSet`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="navigationProperties" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression`1" ref="true">
              <specialization>
                <type api="T:System.Func`2" ref="true">
                  <specialization>
                    <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Linq.IQueryable`1" ref="true">
          <specialization>
            <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseRepository`1.Insert(`0[])">
      <apidata name="Insert" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="items" params="true">
          <arrayOf rank="1">
            <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
          </arrayOf>
        </parameter>
      </parameters>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.Insert(`0[])">
          <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseRepository`1.InsertToContext(`0[],IOC.FW.Core.Database.Repository{`0})">
      <apidata name="InsertToContext" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="items">
          <arrayOf rank="1">
            <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
          </arrayOf>
        </parameter>
        <parameter name="context">
          <type api="T:IOC.FW.Core.Database.Repository`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseRepository`1.List">
      <apidata name="List" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.List">
          <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseRepository`1.LongCount">
      <apidata name="LongCount" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.LongCount">
          <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseRepository`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
      <apidata name="LongCount" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="where">
          <type api="T:System.Linq.Expressions.Expression`1" ref="true">
            <specialization>
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
          <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseRepository`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},IOC.FW.Core.Database.Repository{`0})">
      <apidata name="LongCount" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="where">
          <type api="T:System.Linq.Expressions.Expression`1" ref="true">
            <specialization>
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="context">
          <type api="T:IOC.FW.Core.Database.Repository`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int64" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseRepository`1.Model">
      <apidata name="Model" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
      </returns>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.Model">
          <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseRepository`1.OpenConnection(IOC.FW.Core.Database.Repository{`0})">
      <apidata name="OpenConnection" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="context">
          <type api="T:IOC.FW.Core.Database.Repository`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Data.Common.DbConnection" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseRepository`1.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
      <apidata name="Select" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="where">
          <type api="T:System.Linq.Expressions.Expression`1" ref="true">
            <specialization>
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="navigationProperties" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression`1" ref="true">
              <specialization>
                <type api="T:System.Func`2" ref="true">
                  <specialization>
                    <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IList`1" ref="true">
          <specialization>
            <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
          <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseRepository`1.SelectAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
      <apidata name="SelectAll" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="navigationProperties" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression`1" ref="true">
              <specialization>
                <type api="T:System.Func`2" ref="true">
                  <specialization>
                    <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IList`1" ref="true">
          <specialization>
            <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.SelectAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
          <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseRepository`1.SelectSingle(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
      <apidata name="SelectSingle" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="where">
          <type api="T:System.Linq.Expressions.Expression`1" ref="true">
            <specialization>
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="navigationProperties" params="true">
          <arrayOf rank="1">
            <type api="T:System.Linq.Expressions.Expression`1" ref="true">
              <specialization>
                <type api="T:System.Func`2" ref="true">
                  <specialization>
                    <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
                    <type api="T:System.Object" ref="true" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
      </returns>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.SelectSingle(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
          <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseRepository`1.SetConnection(System.String)">
      <apidata name="SetConnection" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="nameOrConnectionString">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseRepository`1.SetParameter(System.Data.Common.DbCommand,System.Collections.Generic.Dictionary{System.String,System.Object})">
      <apidata name="SetParameter" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="comm">
          <type api="T:System.Data.Common.DbCommand" ref="true" />
        </parameter>
        <parameter name="parameters" optional="true">
          <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:System.Object" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseRepository`1.SetParameter(System.Data.Common.DbCommand,System.Collections.Generic.List{System.Tuple{System.Data.ParameterDirection,System.String,System.Object}})">
      <apidata name="SetParameter" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="comm">
          <type api="T:System.Data.Common.DbCommand" ref="true" />
        </parameter>
        <parameter name="parameters" optional="true">
          <type api="T:System.Collections.Generic.List`1" ref="true">
            <specialization>
              <type api="T:System.Tuple`3" ref="true">
                <specialization>
                  <type api="T:System.Data.ParameterDirection" ref="false" />
                  <type api="T:System.String" ref="true" />
                  <type api="T:System.Object" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseRepository`1.Update(`0[])">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="items" params="true">
          <arrayOf rank="1">
            <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
          </arrayOf>
        </parameter>
      </parameters>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.Update(`0[])">
          <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseRepository`1.UpdatePriority``1(``0[])">
      <apidata name="UpdatePriority" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <templates>
        <template name="TPriorityModel">
          <constrained>
            <implements>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
              <type api="T:IOC.FW.Core.Abstraction.Miscellanous.IPrioritySortable" ref="true" />
            </implements>
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="items">
          <arrayOf rank="1">
            <template name="TPriorityModel" index="0" api="M:IOC.FW.Core.Base.BaseRepository`1.UpdatePriority``1(``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <implements>
        <member api="M:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1.UpdatePriority``1(``0[])">
          <type api="T:IOC.FW.Core.Abstraction.Business.IBaseBusiness`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BaseRepository`1.UpdateToContext(`0[],IOC.FW.Core.Database.Repository{`0})">
      <apidata name="UpdateToContext" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="items">
          <arrayOf rank="1">
            <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
          </arrayOf>
        </parameter>
        <parameter name="context">
          <type api="T:IOC.FW.Core.Database.Repository`1" ref="true">
            <specialization>
              <template name="TModel" index="0" api="T:IOC.FW.Core.Base.BaseRepository`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BaseRepository`1" ref="true" />
      </containers>
    </api>
    <api id="T:IOC.FW.Core.Base.BasicAuthenticationIdentity">
      <apidata name="BasicAuthenticationIdentity" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Security.Principal.GenericIdentity" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:IOC.FW.Core.Base.BasicAuthenticationIdentity.#ctor(System.String,System.String)" />
        <element api="P:IOC.FW.Core.Base.BasicAuthenticationIdentity.ID" />
        <element api="P:IOC.FW.Core.Base.BasicAuthenticationIdentity.UserName" />
        <element api="P:IOC.FW.Core.Base.BasicAuthenticationIdentity.Password" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Base.BasicAuthenticationIdentity.#ctor(System.String,System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="name">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="password">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BasicAuthenticationIdentity" ref="true" />
      </containers>
    </api>
    <api id="P:IOC.FW.Core.Base.BasicAuthenticationIdentity.ID">
      <apidata name="ID" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ID" />
      <setter name="set_ID" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BasicAuthenticationIdentity" ref="true" />
      </containers>
    </api>
    <api id="P:IOC.FW.Core.Base.BasicAuthenticationIdentity.Password">
      <apidata name="Password" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_Password" />
      <setter name="set_Password" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BasicAuthenticationIdentity" ref="true" />
      </containers>
    </api>
    <api id="P:IOC.FW.Core.Base.BasicAuthenticationIdentity.UserName">
      <apidata name="UserName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_UserName" />
      <setter name="set_UserName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Base" />
        <type api="T:IOC.FW.Core.Base.BasicAuthenticationIdentity" ref="true" />
      </containers>
    </api>
    <api id="N:IOC.FW.Core.Cripto">
      <apidata name="IOC.FW.Core.Cripto" group="namespace" />
      <elements>
        <element api="T:IOC.FW.Core.Cripto.SHA1Util" />
        <element api="T:IOC.FW.Core.Cripto.MD5Util" />
        <element api="T:IOC.FW.Core.Cripto.RSAUtil" />
        <element api="T:IOC.FW.Core.Cripto.RijdaelUtil" />
        <element api="T:IOC.FW.Core.Cripto.DESUtil" />
        <element api="T:IOC.FW.Core.Cripto.AESUtil" />
        <element api="T:IOC.FW.Core.Cripto.TripleDESUtil" />
      </elements>
    </api>
    <api id="T:IOC.FW.Core.Cripto.AESUtil">
      <apidata name="AESUtil" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:IOC.FW.Core.Cripto.AESUtil.Keys" />
        <element api="M:IOC.FW.Core.Cripto.AESUtil.Encrypt(System.String,System.Byte[],System.Byte[])" />
        <element api="M:IOC.FW.Core.Cripto.AESUtil.Decrypt(System.Byte[],System.Byte[],System.Byte[])" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Cripto" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Cripto.AESUtil.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
      <apidata name="Decrypt" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="cipherText">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
        <parameter name="Key">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
        <parameter name="IV">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Cripto" />
        <type api="T:IOC.FW.Core.Cripto.AESUtil" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Cripto.AESUtil.Encrypt(System.String,System.Byte[],System.Byte[])">
      <apidata name="Encrypt" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="plainText">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="Key">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
        <parameter name="IV">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.Byte" ref="false" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Cripto" />
        <type api="T:IOC.FW.Core.Cripto.AESUtil" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Cripto.AESUtil.Keys">
      <apidata name="Keys" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Collections.Generic.IList`1" ref="true">
          <specialization>
            <arrayOf rank="1">
              <type api="T:System.Byte" ref="false" />
            </arrayOf>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Cripto" />
        <type api="T:IOC.FW.Core.Cripto.AESUtil" ref="true" />
      </containers>
    </api>
    <api id="T:IOC.FW.Core.Cripto.DESUtil">
      <apidata name="DESUtil" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:IOC.FW.Core.Cripto.DESUtil.Keys" />
        <element api="M:IOC.FW.Core.Cripto.DESUtil.Encrypt(System.String,System.Byte[],System.Byte[])" />
        <element api="M:IOC.FW.Core.Cripto.DESUtil.Decrypt(System.Byte[],System.Byte[],System.Byte[])" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Cripto" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Cripto.DESUtil.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
      <apidata name="Decrypt" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="cipherText">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
        <parameter name="Key">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
        <parameter name="IV">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Cripto" />
        <type api="T:IOC.FW.Core.Cripto.DESUtil" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Cripto.DESUtil.Encrypt(System.String,System.Byte[],System.Byte[])">
      <apidata name="Encrypt" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="plainText">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="Key">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
        <parameter name="IV">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.Byte" ref="false" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Cripto" />
        <type api="T:IOC.FW.Core.Cripto.DESUtil" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Cripto.DESUtil.Keys">
      <apidata name="Keys" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Collections.Generic.IList`1" ref="true">
          <specialization>
            <arrayOf rank="1">
              <type api="T:System.Byte" ref="false" />
            </arrayOf>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Cripto" />
        <type api="T:IOC.FW.Core.Cripto.DESUtil" ref="true" />
      </containers>
    </api>
    <api id="T:IOC.FW.Core.Cripto.MD5Util">
      <apidata name="MD5Util" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:IOC.FW.Core.Cripto.MD5Util.GetHash(System.String)" />
        <element api="M:IOC.FW.Core.Cripto.MD5Util.VerifyHash(System.String,System.String)" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Cripto" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Cripto.MD5Util.GetHash(System.String)">
      <apidata name="GetHash" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="input">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Cripto" />
        <type api="T:IOC.FW.Core.Cripto.MD5Util" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Cripto.MD5Util.VerifyHash(System.String,System.String)">
      <apidata name="VerifyHash" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="input">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="hash">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Cripto" />
        <type api="T:IOC.FW.Core.Cripto.MD5Util" ref="true" />
      </containers>
    </api>
    <api id="T:IOC.FW.Core.Cripto.RijdaelUtil">
      <apidata name="RijdaelUtil" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:IOC.FW.Core.Cripto.RijdaelUtil.Encrypt(System.String,System.Byte[],System.Byte[])" />
        <element api="M:IOC.FW.Core.Cripto.RijdaelUtil.Decrypt(System.Byte[],System.Byte[],System.Byte[])" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Cripto" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Cripto.RijdaelUtil.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
      <apidata name="Decrypt" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="cipherText">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
        <parameter name="Key">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
        <parameter name="IV">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Cripto" />
        <type api="T:IOC.FW.Core.Cripto.RijdaelUtil" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Cripto.RijdaelUtil.Encrypt(System.String,System.Byte[],System.Byte[])">
      <apidata name="Encrypt" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="plainText">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="Key">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
        <parameter name="IV">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.Byte" ref="false" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Cripto" />
        <type api="T:IOC.FW.Core.Cripto.RijdaelUtil" ref="true" />
      </containers>
    </api>
    <api id="T:IOC.FW.Core.Cripto.RSAUtil">
      <apidata name="RSAUtil" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:IOC.FW.Core.Cripto.RSAUtil.Keys" />
        <element api="M:IOC.FW.Core.Cripto.RSAUtil.Keys(System.String,System.String)" />
        <element api="M:IOC.FW.Core.Cripto.RSAUtil.Encrypt(System.String,System.String,System.String)" />
        <element api="M:IOC.FW.Core.Cripto.RSAUtil.Encrypt(System.Security.Cryptography.RSAParameters,System.Byte[])" />
        <element api="M:IOC.FW.Core.Cripto.RSAUtil.Decrypt(System.String,System.String,System.String)" />
        <element api="M:IOC.FW.Core.Cripto.RSAUtil.Decrypt(System.Security.Cryptography.RSAParameters,System.Byte[])" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Cripto" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Cripto.RSAUtil.Decrypt(System.Security.Cryptography.RSAParameters,System.Byte[])">
      <apidata name="Decrypt" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="privateKey">
          <type api="T:System.Security.Cryptography.RSAParameters" ref="false" />
        </parameter>
        <parameter name="encryptedBytes">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.Byte" ref="false" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Cripto" />
        <type api="T:IOC.FW.Core.Cripto.RSAUtil" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Cripto.RSAUtil.Decrypt(System.String,System.String,System.String)">
      <apidata name="Decrypt" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="privateKeyFileName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="encryptedFileName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="plainFileName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Cripto" />
        <type api="T:IOC.FW.Core.Cripto.RSAUtil" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Cripto.RSAUtil.Encrypt(System.Security.Cryptography.RSAParameters,System.Byte[])">
      <apidata name="Encrypt" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="publicKey">
          <type api="T:System.Security.Cryptography.RSAParameters" ref="false" />
        </parameter>
        <parameter name="plainBytes">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.Byte" ref="false" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Cripto" />
        <type api="T:IOC.FW.Core.Cripto.RSAUtil" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Cripto.RSAUtil.Encrypt(System.String,System.String,System.String)">
      <apidata name="Encrypt" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="publicKeyFileName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="plainFileName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="encryptedFileName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Cripto" />
        <type api="T:IOC.FW.Core.Cripto.RSAUtil" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Cripto.RSAUtil.Keys">
      <apidata name="Keys" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <arrayOf rank="1">
          <type api="T:System.Security.Cryptography.RSAParameters" ref="false" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Cripto" />
        <type api="T:IOC.FW.Core.Cripto.RSAUtil" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Cripto.RSAUtil.Keys(System.String,System.String)">
      <apidata name="Keys" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="publicKeyFileName">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="privateKeyFileName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Cripto" />
        <type api="T:IOC.FW.Core.Cripto.RSAUtil" ref="true" />
      </containers>
    </api>
    <api id="T:IOC.FW.Core.Cripto.SHA1Util">
      <apidata name="SHA1Util" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:IOC.FW.Core.Cripto.SHA1Util.GenerateSHA1(System.String)" />
        <element api="M:IOC.FW.Core.Cripto.SHA1Util.GenerateSHA1(System.String,System.Byte[])" />
        <element api="M:IOC.FW.Core.Cripto.SHA1Util.GenerateSalt(System.Int32)" />
        <element api="M:IOC.FW.Core.Cripto.SHA1Util.AppendByteArray(System.Byte[],System.Byte[])" />
        <element api="M:IOC.FW.Core.Cripto.SHA1Util.VerifyHash(System.String,System.String,System.Byte[])" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Cripto" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Cripto.SHA1Util.AppendByteArray(System.Byte[],System.Byte[])">
      <apidata name="AppendByteArray" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="byteArray1">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
        <parameter name="byteArray2">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.Byte" ref="false" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Cripto" />
        <type api="T:IOC.FW.Core.Cripto.SHA1Util" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Cripto.SHA1Util.GenerateSalt(System.Int32)">
      <apidata name="GenerateSalt" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="saltSize">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.Byte" ref="false" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Cripto" />
        <type api="T:IOC.FW.Core.Cripto.SHA1Util" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Cripto.SHA1Util.GenerateSHA1(System.String)">
      <apidata name="GenerateSHA1" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="plainTextString">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Cripto" />
        <type api="T:IOC.FW.Core.Cripto.SHA1Util" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Cripto.SHA1Util.GenerateSHA1(System.String,System.Byte[])">
      <apidata name="GenerateSHA1" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="plainTextString">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="salt">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Cripto" />
        <type api="T:IOC.FW.Core.Cripto.SHA1Util" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Cripto.SHA1Util.VerifyHash(System.String,System.String,System.Byte[])">
      <apidata name="VerifyHash" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="input">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="hash">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="salt">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Cripto" />
        <type api="T:IOC.FW.Core.Cripto.SHA1Util" ref="true" />
      </containers>
    </api>
    <api id="T:IOC.FW.Core.Cripto.TripleDESUtil">
      <apidata name="TripleDESUtil" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:IOC.FW.Core.Cripto.TripleDESUtil.Keys" />
        <element api="M:IOC.FW.Core.Cripto.TripleDESUtil.Encrypt(System.String,System.Byte[],System.Byte[])" />
        <element api="M:IOC.FW.Core.Cripto.TripleDESUtil.Decrypt(System.Byte[],System.Byte[],System.Byte[])" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Cripto" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Cripto.TripleDESUtil.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
      <apidata name="Decrypt" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="cipherText">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
        <parameter name="Key">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
        <parameter name="IV">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Cripto" />
        <type api="T:IOC.FW.Core.Cripto.TripleDESUtil" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Cripto.TripleDESUtil.Encrypt(System.String,System.Byte[],System.Byte[])">
      <apidata name="Encrypt" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="plainText">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="Key">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
        <parameter name="IV">
          <arrayOf rank="1">
            <type api="T:System.Byte" ref="false" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.Byte" ref="false" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Cripto" />
        <type api="T:IOC.FW.Core.Cripto.TripleDESUtil" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Cripto.TripleDESUtil.Keys">
      <apidata name="Keys" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.Collections.Generic.IList`1" ref="true">
          <specialization>
            <arrayOf rank="1">
              <type api="T:System.Byte" ref="false" />
            </arrayOf>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Cripto" />
        <type api="T:IOC.FW.Core.Cripto.TripleDESUtil" ref="true" />
      </containers>
    </api>
    <api id="N:IOC.FW.Core.Database">
      <apidata name="IOC.FW.Core.Database" group="namespace" />
      <elements>
        <element api="T:IOC.FW.Core.Database.ORM" />
        <element api="T:IOC.FW.Core.Database.FormatProperty" />
        <element api="T:IOC.FW.Core.Database.Repository`1" />
      </elements>
    </api>
    <api id="T:IOC.FW.Core.Database.FormatProperty">
      <apidata name="FormatProperty" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:IOC.FW.Core.Database.FormatProperty.#ctor" />
        <element api="P:IOC.FW.Core.Database.FormatProperty.ColumnName" />
        <element api="P:IOC.FW.Core.Database.FormatProperty.PropertyName" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Database" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Database.FormatProperty.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Database" />
        <type api="T:IOC.FW.Core.Database.FormatProperty" ref="true" />
      </containers>
    </api>
    <api id="P:IOC.FW.Core.Database.FormatProperty.ColumnName">
      <apidata name="ColumnName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_ColumnName" />
      <setter name="set_ColumnName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Database" />
        <type api="T:IOC.FW.Core.Database.FormatProperty" ref="true" />
      </containers>
    </api>
    <api id="P:IOC.FW.Core.Database.FormatProperty.PropertyName">
      <apidata name="PropertyName" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_PropertyName" />
      <setter name="set_PropertyName" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Database" />
        <type api="T:IOC.FW.Core.Database.FormatProperty" ref="true" />
      </containers>
    </api>
    <api id="T:IOC.FW.Core.Database.ORM">
      <apidata name="ORM" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:IOC.FW.Core.Database.ORM.GetProperties(System.Type)" />
        <element api="M:IOC.FW.Core.Database.ORM.GetModel``1(System.Data.IDataReader,IOC.FW.Core.Database.FormatProperty[])" />
        <element api="M:IOC.FW.Core.Database.ORM.#ctor" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Database" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Database.ORM.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Database" />
        <type api="T:IOC.FW.Core.Database.ORM" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Database.ORM.GetModel``1(System.Data.IDataReader,IOC.FW.Core.Database.FormatProperty[])">
      <apidata name="GetModel" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TNewModel">
          <constrained ref="true" />
        </template>
      </templates>
      <parameters>
        <parameter name="reader">
          <type api="T:System.Data.IDataReader" ref="true" />
        </parameter>
        <parameter name="properties">
          <arrayOf rank="1">
            <type api="T:IOC.FW.Core.Database.FormatProperty" ref="true" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.List`1" ref="true">
          <specialization>
            <template name="TNewModel" index="0" api="M:IOC.FW.Core.Database.ORM.GetModel``1(System.Data.IDataReader,IOC.FW.Core.Database.FormatProperty[])" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Database" />
        <type api="T:IOC.FW.Core.Database.ORM" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Database.ORM.GetProperties(System.Type)">
      <apidata name="GetProperties" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="tpObject">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:IOC.FW.Core.Database.FormatProperty" ref="true" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Database" />
        <type api="T:IOC.FW.Core.Database.ORM" ref="true" />
      </containers>
    </api>
    <api id="T:IOC.FW.Core.Database.Repository`1">
      <apidata name="Repository" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Data.Entity.DbContext" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TModel">
          <constrained ref="true" ctor="true" />
        </template>
      </templates>
      <elements>
        <element api="F:IOC.FW.Core.Database.Repository`1._dbQuery" />
        <element api="M:IOC.FW.Core.Database.Repository`1.#ctor(System.String)" />
        <element api="M:IOC.FW.Core.Database.Repository`1.OnModelCreating(System.Data.Entity.DbModelBuilder)" />
        <element api="P:IOC.FW.Core.Database.Repository`1.DbObject" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Database" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Database.Repository`1.#ctor(System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="nameOrConnectionString">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Database" />
        <type api="T:IOC.FW.Core.Database.Repository`1" ref="true" />
      </containers>
    </api>
    <api id="F:IOC.FW.Core.Database.Repository`1._dbQuery">
      <apidata name="_dbQuery" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Linq.IQueryable`1" ref="true">
          <specialization>
            <template name="TModel" index="0" api="T:IOC.FW.Core.Database.Repository`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Database" />
        <type api="T:IOC.FW.Core.Database.Repository`1" ref="true" />
      </containers>
    </api>
    <api id="P:IOC.FW.Core.Database.Repository`1.DbObject">
      <apidata name="DbObject" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" set="true" />
      <getter name="get_DbObject" />
      <setter name="set_DbObject" />
      <returns>
        <type api="T:System.Data.Entity.DbSet`1" ref="true">
          <specialization>
            <template name="TModel" index="0" api="T:IOC.FW.Core.Database.Repository`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Database" />
        <type api="T:IOC.FW.Core.Database.Repository`1" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Database.Repository`1.OnModelCreating(System.Data.Entity.DbModelBuilder)">
      <apidata name="OnModelCreating" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Data.Entity.DbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
          <type api="T:System.Data.Entity.DbContext" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="modelBuilder">
          <type api="T:System.Data.Entity.DbModelBuilder" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Database" />
        <type api="T:IOC.FW.Core.Database.Repository`1" ref="true" />
      </containers>
    </api>
    <api id="N:IOC.FW.Core.Documents">
      <apidata name="IOC.FW.Core.Documents" group="namespace" />
      <elements>
        <element api="T:IOC.FW.Core.Documents.Validation" />
      </elements>
    </api>
    <api id="T:IOC.FW.Core.Documents.Validation">
      <apidata name="Validation" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:IOC.FW.Core.Documents.Validation.LuhnGenerate(System.String)" />
        <element api="M:IOC.FW.Core.Documents.Validation.CompareLuhnDigit(System.String)" />
        <element api="M:IOC.FW.Core.Documents.Validation.CpfDigits(System.String)" />
        <element api="M:IOC.FW.Core.Documents.Validation.ValidateCpf(System.String)" />
        <element api="M:IOC.FW.Core.Documents.Validation.GenerateCpf" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Documents" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Documents.Validation.CompareLuhnDigit(System.String)">
      <apidata name="CompareLuhnDigit" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="number">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Documents" />
        <type api="T:IOC.FW.Core.Documents.Validation" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Documents.Validation.CpfDigits(System.String)">
      <apidata name="CpfDigits" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="cpf">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Documents" />
        <type api="T:IOC.FW.Core.Documents.Validation" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Documents.Validation.GenerateCpf">
      <apidata name="GenerateCpf" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Documents" />
        <type api="T:IOC.FW.Core.Documents.Validation" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Documents.Validation.LuhnGenerate(System.String)">
      <apidata name="LuhnGenerate" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="number">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Documents" />
        <type api="T:IOC.FW.Core.Documents.Validation" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Documents.Validation.ValidateCpf(System.String)">
      <apidata name="ValidateCpf" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="cpf">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Documents" />
        <type api="T:IOC.FW.Core.Documents.Validation" ref="true" />
      </containers>
    </api>
    <api id="N:IOC.FW.Core.Factory">
      <apidata name="IOC.FW.Core.Factory" group="namespace" />
      <elements>
        <element api="T:IOC.FW.Core.Factory.SimpleInjectionModule" />
        <element api="T:IOC.FW.Core.Factory.InstanceFactory" />
      </elements>
    </api>
    <api id="T:IOC.FW.Core.Factory.InstanceFactory">
      <apidata name="InstanceFactory" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:IOC.FW.Core.Factory.InstanceFactory.GetInjection" />
        <element api="M:IOC.FW.Core.Factory.InstanceFactory.GetImplementation``1" />
        <element api="M:IOC.FW.Core.Factory.InstanceFactory.RegisterModules(System.Action{SimpleInjector.Container})" />
        <element api="M:IOC.FW.Core.Factory.InstanceFactory.#ctor" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Factory" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Factory.InstanceFactory.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Factory" />
        <type api="T:IOC.FW.Core.Factory.InstanceFactory" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Factory.InstanceFactory.GetImplementation``1">
      <apidata name="GetImplementation" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained ref="true" />
        </template>
      </templates>
      <returns>
        <template name="T" index="0" api="M:IOC.FW.Core.Factory.InstanceFactory.GetImplementation``1" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Factory" />
        <type api="T:IOC.FW.Core.Factory.InstanceFactory" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Factory.InstanceFactory.GetInjection">
      <apidata name="GetInjection" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:SimpleInjector.Container" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Factory" />
        <type api="T:IOC.FW.Core.Factory.InstanceFactory" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Factory.InstanceFactory.RegisterModules(System.Action{SimpleInjector.Container})">
      <apidata name="RegisterModules" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="preAction" optional="true">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <type api="T:SimpleInjector.Container" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:SimpleInjector.Container" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Factory" />
        <type api="T:IOC.FW.Core.Factory.InstanceFactory" ref="true" />
      </containers>
    </api>
    <api id="T:IOC.FW.Core.Factory.SimpleInjectionModule">
      <apidata name="SimpleInjectionModule" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:IOC.FW.Core.Abstraction.Factory.IInjectionModule`1" ref="true">
          <specialization>
            <type api="T:SimpleInjector.Container" ref="true" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="M:IOC.FW.Core.Factory.SimpleInjectionModule.#ctor" />
        <element api="M:IOC.FW.Core.Factory.SimpleInjectionModule.Load" />
        <element api="M:IOC.FW.Core.Factory.SimpleInjectionModule.SetDefaultBindings(SimpleInjector.Container)" />
        <element api="P:IOC.FW.Core.Factory.SimpleInjectionModule.container" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Factory" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Factory.SimpleInjectionModule.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Factory" />
        <type api="T:IOC.FW.Core.Factory.SimpleInjectionModule" ref="true" />
      </containers>
    </api>
    <api id="P:IOC.FW.Core.Factory.SimpleInjectionModule.container">
      <apidata name="container" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" set="true" />
      <getter name="get_container" />
      <setter name="set_container" />
      <returns>
        <type api="T:SimpleInjector.Container" ref="true" />
      </returns>
      <implements>
        <member api="P:IOC.FW.Core.Abstraction.Factory.IInjectionModule`1.container">
          <type api="T:IOC.FW.Core.Abstraction.Factory.IInjectionModule`1" ref="true">
            <specialization>
              <type api="T:SimpleInjector.Container" ref="true" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Factory" />
        <type api="T:IOC.FW.Core.Factory.SimpleInjectionModule" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Factory.SimpleInjectionModule.Load">
      <apidata name="Load" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Factory" />
        <type api="T:IOC.FW.Core.Factory.SimpleInjectionModule" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Factory.SimpleInjectionModule.SetDefaultBindings(SimpleInjector.Container)">
      <apidata name="SetDefaultBindings" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="container">
          <type api="T:SimpleInjector.Container" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Factory" />
        <type api="T:IOC.FW.Core.Factory.SimpleInjectionModule" ref="true" />
      </containers>
    </api>
    <api id="N:IOC.FW.Core.Images">
      <apidata name="IOC.FW.Core.Images" group="namespace" />
      <elements>
        <element api="T:IOC.FW.Core.Images.Thumbnail" />
        <element api="T:IOC.FW.Core.Images.Transform" />
      </elements>
    </api>
    <api id="T:IOC.FW.Core.Images.Thumbnail">
      <apidata name="Thumbnail" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:IOC.FW.Core.Images.Thumbnail.Create(System.Drawing.Image,System.Drawing.Size,IOC.FW.Core.Enumerators.ReferencePoint,System.Boolean)" />
        <element api="M:IOC.FW.Core.Images.Thumbnail.GetStartPosition(System.Drawing.Size,System.Drawing.Size,IOC.FW.Core.Enumerators.ReferencePoint)" />
        <element api="M:IOC.FW.Core.Images.Thumbnail.GetStartPositionOnBottomRight(System.Drawing.Size,System.Drawing.Size)" />
        <element api="M:IOC.FW.Core.Images.Thumbnail.GetStartPositionOnBottomCenter(System.Drawing.Size,System.Drawing.Size)" />
        <element api="M:IOC.FW.Core.Images.Thumbnail.GetStartPositionOnBottomLeft(System.Drawing.Size,System.Drawing.Size)" />
        <element api="M:IOC.FW.Core.Images.Thumbnail.GetStartPositionOnMiddleRight(System.Drawing.Size,System.Drawing.Size)" />
        <element api="M:IOC.FW.Core.Images.Thumbnail.GetStartPositionOnMiddleCenter(System.Drawing.Size,System.Drawing.Size)" />
        <element api="M:IOC.FW.Core.Images.Thumbnail.GetStartPositionOnMiddleLeft(System.Drawing.Size,System.Drawing.Size)" />
        <element api="M:IOC.FW.Core.Images.Thumbnail.GetStartPositionOnTopRight(System.Drawing.Size,System.Drawing.Size)" />
        <element api="M:IOC.FW.Core.Images.Thumbnail.GetStartPositionOnTopCenter(System.Drawing.Size,System.Drawing.Size)" />
        <element api="M:IOC.FW.Core.Images.Thumbnail.GetStartPositionOnTopLeft(System.Drawing.Size,System.Drawing.Size)" />
        <element api="M:IOC.FW.Core.Images.Thumbnail.GetProportionalSize(System.Drawing.Size,System.Drawing.Size,System.Boolean)" />
        <element api="M:IOC.FW.Core.Images.Thumbnail.GetImageFormat(System.String)" />
        <element api="M:IOC.FW.Core.Images.Thumbnail.Resize(System.Drawing.Image,System.Drawing.Size)" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Images" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Images.Thumbnail.Create(System.Drawing.Image,System.Drawing.Size,IOC.FW.Core.Enumerators.ReferencePoint,System.Boolean)">
      <apidata name="Create" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="img">
          <type api="T:System.Drawing.Image" ref="true" />
        </parameter>
        <parameter name="cropArea">
          <type api="T:System.Drawing.Size" ref="false" />
        </parameter>
        <parameter name="refPoint" optional="true">
          <type api="T:IOC.FW.Core.Enumerators.ReferencePoint" ref="false">
            <type api="T:IOC.FW.Core.Enumerators" ref="true" />
          </type>
          <argument>
            <type api="T:IOC.FW.Core.Enumerators.ReferencePoint" ref="false">
              <type api="T:IOC.FW.Core.Enumerators" ref="true" />
            </type>
            <enumValue>
              <field name="MiddleCenter" />
            </enumValue>
          </argument>
        </parameter>
        <parameter name="fitInside" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Drawing.Image" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Images" />
        <type api="T:IOC.FW.Core.Images.Thumbnail" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Images.Thumbnail.GetImageFormat(System.String)">
      <apidata name="GetImageFormat" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fileName">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Drawing.Imaging.ImageFormat" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Images" />
        <type api="T:IOC.FW.Core.Images.Thumbnail" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Images.Thumbnail.GetProportionalSize(System.Drawing.Size,System.Drawing.Size,System.Boolean)">
      <apidata name="GetProportionalSize" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="original">
          <type api="T:System.Drawing.Size" ref="false" />
        </parameter>
        <parameter name="requested">
          <type api="T:System.Drawing.Size" ref="false" />
        </parameter>
        <parameter name="fitInside">
          <type api="T:System.Boolean" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Drawing.Size" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Images" />
        <type api="T:IOC.FW.Core.Images.Thumbnail" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Images.Thumbnail.GetStartPosition(System.Drawing.Size,System.Drawing.Size,IOC.FW.Core.Enumerators.ReferencePoint)">
      <apidata name="GetStartPosition" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="requested">
          <type api="T:System.Drawing.Size" ref="false" />
        </parameter>
        <parameter name="proportional">
          <type api="T:System.Drawing.Size" ref="false" />
        </parameter>
        <parameter name="refPoint">
          <type api="T:IOC.FW.Core.Enumerators.ReferencePoint" ref="false">
            <type api="T:IOC.FW.Core.Enumerators" ref="true" />
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Drawing.Point" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Images" />
        <type api="T:IOC.FW.Core.Images.Thumbnail" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Images.Thumbnail.GetStartPositionOnBottomCenter(System.Drawing.Size,System.Drawing.Size)">
      <apidata name="GetStartPositionOnBottomCenter" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="requested">
          <type api="T:System.Drawing.Size" ref="false" />
        </parameter>
        <parameter name="proportional">
          <type api="T:System.Drawing.Size" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Drawing.Point" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Images" />
        <type api="T:IOC.FW.Core.Images.Thumbnail" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Images.Thumbnail.GetStartPositionOnBottomLeft(System.Drawing.Size,System.Drawing.Size)">
      <apidata name="GetStartPositionOnBottomLeft" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="requested">
          <type api="T:System.Drawing.Size" ref="false" />
        </parameter>
        <parameter name="proportional">
          <type api="T:System.Drawing.Size" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Drawing.Point" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Images" />
        <type api="T:IOC.FW.Core.Images.Thumbnail" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Images.Thumbnail.GetStartPositionOnBottomRight(System.Drawing.Size,System.Drawing.Size)">
      <apidata name="GetStartPositionOnBottomRight" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="requested">
          <type api="T:System.Drawing.Size" ref="false" />
        </parameter>
        <parameter name="proportional">
          <type api="T:System.Drawing.Size" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Drawing.Point" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Images" />
        <type api="T:IOC.FW.Core.Images.Thumbnail" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Images.Thumbnail.GetStartPositionOnMiddleCenter(System.Drawing.Size,System.Drawing.Size)">
      <apidata name="GetStartPositionOnMiddleCenter" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="requested">
          <type api="T:System.Drawing.Size" ref="false" />
        </parameter>
        <parameter name="proportional">
          <type api="T:System.Drawing.Size" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Drawing.Point" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Images" />
        <type api="T:IOC.FW.Core.Images.Thumbnail" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Images.Thumbnail.GetStartPositionOnMiddleLeft(System.Drawing.Size,System.Drawing.Size)">
      <apidata name="GetStartPositionOnMiddleLeft" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="requested">
          <type api="T:System.Drawing.Size" ref="false" />
        </parameter>
        <parameter name="proportional">
          <type api="T:System.Drawing.Size" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Drawing.Point" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Images" />
        <type api="T:IOC.FW.Core.Images.Thumbnail" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Images.Thumbnail.GetStartPositionOnMiddleRight(System.Drawing.Size,System.Drawing.Size)">
      <apidata name="GetStartPositionOnMiddleRight" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="requested">
          <type api="T:System.Drawing.Size" ref="false" />
        </parameter>
        <parameter name="proportional">
          <type api="T:System.Drawing.Size" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Drawing.Point" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Images" />
        <type api="T:IOC.FW.Core.Images.Thumbnail" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Images.Thumbnail.GetStartPositionOnTopCenter(System.Drawing.Size,System.Drawing.Size)">
      <apidata name="GetStartPositionOnTopCenter" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="requested">
          <type api="T:System.Drawing.Size" ref="false" />
        </parameter>
        <parameter name="proportional">
          <type api="T:System.Drawing.Size" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Drawing.Point" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Images" />
        <type api="T:IOC.FW.Core.Images.Thumbnail" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Images.Thumbnail.GetStartPositionOnTopLeft(System.Drawing.Size,System.Drawing.Size)">
      <apidata name="GetStartPositionOnTopLeft" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="requested">
          <type api="T:System.Drawing.Size" ref="false" />
        </parameter>
        <parameter name="proportional">
          <type api="T:System.Drawing.Size" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Drawing.Point" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Images" />
        <type api="T:IOC.FW.Core.Images.Thumbnail" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Images.Thumbnail.GetStartPositionOnTopRight(System.Drawing.Size,System.Drawing.Size)">
      <apidata name="GetStartPositionOnTopRight" group="member" subgroup="method" />
      <memberdata visibility="private" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="requested">
          <type api="T:System.Drawing.Size" ref="false" />
        </parameter>
        <parameter name="proportional">
          <type api="T:System.Drawing.Size" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Drawing.Point" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Images" />
        <type api="T:IOC.FW.Core.Images.Thumbnail" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Images.Thumbnail.Resize(System.Drawing.Image,System.Drawing.Size)">
      <apidata name="Resize" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="img">
          <type api="T:System.Drawing.Image" ref="true" />
        </parameter>
        <parameter name="size">
          <type api="T:System.Drawing.Size" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Drawing.Image" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Images" />
        <type api="T:IOC.FW.Core.Images.Thumbnail" ref="true" />
      </containers>
    </api>
    <api id="T:IOC.FW.Core.Images.Transform">
      <apidata name="Transform" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:IOC.FW.Core.Images.Transform.Crop(System.Drawing.Image,System.Drawing.Rectangle)" />
        <element api="M:IOC.FW.Core.Images.Transform.Resize(System.Drawing.Image,System.Drawing.Size)" />
        <element api="M:IOC.FW.Core.Images.Transform.Convert(System.Drawing.Image)" />
        <element api="M:IOC.FW.Core.Images.Transform.#ctor" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Images" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Images.Transform.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Images" />
        <type api="T:IOC.FW.Core.Images.Transform" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Images.Transform.Convert(System.Drawing.Image)">
      <apidata name="Convert" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="image">
          <type api="T:System.Drawing.Image" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.IO.MemoryStream" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Images" />
        <type api="T:IOC.FW.Core.Images.Transform" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Images.Transform.Crop(System.Drawing.Image,System.Drawing.Rectangle)">
      <apidata name="Crop" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="img">
          <type api="T:System.Drawing.Image" ref="true" />
        </parameter>
        <parameter name="rectCrop">
          <type api="T:System.Drawing.Rectangle" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Drawing.Image" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Images" />
        <type api="T:IOC.FW.Core.Images.Transform" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Images.Transform.Resize(System.Drawing.Image,System.Drawing.Size)">
      <apidata name="Resize" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="img">
          <type api="T:System.Drawing.Image" ref="true" />
        </parameter>
        <parameter name="size">
          <type api="T:System.Drawing.Size" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Drawing.Image" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Images" />
        <type api="T:IOC.FW.Core.Images.Transform" ref="true" />
      </containers>
    </api>
    <api id="N:IOC.FW.Core.Logging">
      <apidata name="IOC.FW.Core.Logging" group="namespace" />
      <elements>
        <element api="T:IOC.FW.Core.Logging.LogFactory" />
      </elements>
    </api>
    <api id="T:IOC.FW.Core.Logging.LogFactory">
      <apidata name="LogFactory" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:IOC.FW.Core.Logging.LogFactory.#cctor" />
        <element api="M:IOC.FW.Core.Logging.LogFactory.CreateLog" />
        <element api="M:IOC.FW.Core.Logging.LogFactory.CreateLog(System.Type)" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Logging" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Logging.LogFactory.#cctor">
      <apidata name=".cctor" group="member" subgroup="constructor" />
      <memberdata visibility="private" static="true" special="true" />
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Logging" />
        <type api="T:IOC.FW.Core.Logging.LogFactory" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Logging.LogFactory.CreateLog">
      <apidata name="CreateLog" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:log4net.ILog" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Logging" />
        <type api="T:IOC.FW.Core.Logging.LogFactory" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Core.Logging.LogFactory.CreateLog(System.Type)">
      <apidata name="CreateLog" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="type">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:log4net.ILog" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Core.Logging" />
        <type api="T:IOC.FW.Core.Logging.LogFactory" ref="true" />
      </containers>
    </api>
    <api id="N:IOC.FW.Web">
      <apidata name="IOC.FW.Web" group="namespace" />
      <elements>
        <element api="T:IOC.FW.Web.DeviceDetector" />
        <element api="T:IOC.FW.Web.DeviceDetector.DeviceType" />
        <element api="T:IOC.FW.Web.Thumb" />
      </elements>
    </api>
    <api id="T:IOC.FW.Web.DeviceDetector">
      <apidata name="DeviceDetector" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:IOC.FW.Web.DeviceDetector.GetDeviceType(System.String,System.Boolean,System.Boolean)" />
        <element api="M:IOC.FW.Web.DeviceDetector.#ctor" />
      </elements>
      <containers>
        <library assembly="IOC.FW.Web" module="IOC.FW.Web" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.DeviceDetector.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="IOC.FW.Web" module="IOC.FW.Web" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web" />
        <type api="T:IOC.FW.Web.DeviceDetector" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.DeviceDetector.GetDeviceType(System.String,System.Boolean,System.Boolean)">
      <apidata name="GetDeviceType" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="userAgent">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="IsTabletsDesktops" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </parameter>
        <parameter name="IsTVsDesktops" optional="true">
          <type api="T:System.Boolean" ref="false" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:IOC.FW.Web.DeviceDetector.DeviceType" ref="false">
          <type api="T:IOC.FW.Web.DeviceDetector" ref="true" />
        </type>
      </returns>
      <containers>
        <library assembly="IOC.FW.Web" module="IOC.FW.Web" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web" />
        <type api="T:IOC.FW.Web.DeviceDetector" ref="true" />
      </containers>
    </api>
    <api id="T:IOC.FW.Web.DeviceDetector.DeviceType">
      <apidata name="DeviceType" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:IOC.FW.Web.DeviceDetector.DeviceType.DESKTOP" />
        <element api="F:IOC.FW.Web.DeviceDetector.DeviceType.TV" />
        <element api="F:IOC.FW.Web.DeviceDetector.DeviceType.TABLET" />
        <element api="F:IOC.FW.Web.DeviceDetector.DeviceType.MOBILE" />
      </elements>
      <containers>
        <library assembly="IOC.FW.Web" module="IOC.FW.Web" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web" />
        <type api="T:IOC.FW.Web.DeviceDetector" ref="true" />
      </containers>
    </api>
    <api id="F:IOC.FW.Web.DeviceDetector.DeviceType.DESKTOP">
      <apidata name="DESKTOP" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:IOC.FW.Web.DeviceDetector.DeviceType" ref="false">
          <type api="T:IOC.FW.Web.DeviceDetector" ref="true" />
        </type>
      </returns>
      <value>0</value>
      <containers>
        <library assembly="IOC.FW.Web" module="IOC.FW.Web" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web" />
        <type api="T:IOC.FW.Web.DeviceDetector.DeviceType" ref="false">
          <type api="T:IOC.FW.Web.DeviceDetector" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:IOC.FW.Web.DeviceDetector.DeviceType.MOBILE">
      <apidata name="MOBILE" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:IOC.FW.Web.DeviceDetector.DeviceType" ref="false">
          <type api="T:IOC.FW.Web.DeviceDetector" ref="true" />
        </type>
      </returns>
      <value>3</value>
      <containers>
        <library assembly="IOC.FW.Web" module="IOC.FW.Web" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web" />
        <type api="T:IOC.FW.Web.DeviceDetector.DeviceType" ref="false">
          <type api="T:IOC.FW.Web.DeviceDetector" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:IOC.FW.Web.DeviceDetector.DeviceType.TABLET">
      <apidata name="TABLET" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:IOC.FW.Web.DeviceDetector.DeviceType" ref="false">
          <type api="T:IOC.FW.Web.DeviceDetector" ref="true" />
        </type>
      </returns>
      <value>2</value>
      <containers>
        <library assembly="IOC.FW.Web" module="IOC.FW.Web" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web" />
        <type api="T:IOC.FW.Web.DeviceDetector.DeviceType" ref="false">
          <type api="T:IOC.FW.Web.DeviceDetector" ref="true" />
        </type>
      </containers>
    </api>
    <api id="F:IOC.FW.Web.DeviceDetector.DeviceType.TV">
      <apidata name="TV" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:IOC.FW.Web.DeviceDetector.DeviceType" ref="false">
          <type api="T:IOC.FW.Web.DeviceDetector" ref="true" />
        </type>
      </returns>
      <value>1</value>
      <containers>
        <library assembly="IOC.FW.Web" module="IOC.FW.Web" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web" />
        <type api="T:IOC.FW.Web.DeviceDetector.DeviceType" ref="false">
          <type api="T:IOC.FW.Web.DeviceDetector" ref="true" />
        </type>
      </containers>
    </api>
    <api id="T:IOC.FW.Web.Thumb">
      <apidata name="Thumb" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Web.IHttpHandler" ref="true" />
      </implements>
      <elements>
        <element api="M:IOC.FW.Web.Thumb.ProcessRequest(System.Web.HttpContext)" />
        <element api="M:IOC.FW.Web.Thumb.#ctor" />
        <element api="P:IOC.FW.Web.Thumb.IsReusable" />
      </elements>
      <containers>
        <library assembly="IOC.FW.Web" module="IOC.FW.Web" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.Thumb.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="IOC.FW.Web" module="IOC.FW.Web" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web" />
        <type api="T:IOC.FW.Web.Thumb" ref="true" />
      </containers>
    </api>
    <api id="P:IOC.FW.Web.Thumb.IsReusable">
      <apidata name="IsReusable" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_IsReusable" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="P:System.Web.IHttpHandler.IsReusable">
          <type api="T:System.Web.IHttpHandler" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW.Web" module="IOC.FW.Web" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web" />
        <type api="T:IOC.FW.Web.Thumb" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.Thumb.ProcessRequest(System.Web.HttpContext)">
      <apidata name="ProcessRequest" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="context">
          <type api="T:System.Web.HttpContext" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)">
          <type api="T:System.Web.IHttpHandler" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW.Web" module="IOC.FW.Web" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web" />
        <type api="T:IOC.FW.Web.Thumb" ref="true" />
      </containers>
    </api>
    <api id="N:IOC.FW.Web.Handlers">
      <apidata name="IOC.FW.Web.Handlers" group="namespace" />
      <elements>
        <element api="T:IOC.FW.Web.Handlers.TransformHandler" />
      </elements>
    </api>
    <api id="T:IOC.FW.Web.Handlers.TransformHandler">
      <apidata name="TransformHandler" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Web.IHttpHandler" ref="true" />
      </implements>
      <elements>
        <element api="M:IOC.FW.Web.Handlers.TransformHandler.ProcessRequest(System.Web.HttpContext)" />
        <element api="M:IOC.FW.Web.Handlers.TransformHandler.#ctor" />
        <element api="P:IOC.FW.Web.Handlers.TransformHandler.IsReusable" />
      </elements>
      <containers>
        <library assembly="IOC.FW.Web" module="IOC.FW.Web" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.Handlers" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.Handlers.TransformHandler.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="IOC.FW.Web" module="IOC.FW.Web" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.Handlers" />
        <type api="T:IOC.FW.Web.Handlers.TransformHandler" ref="true" />
      </containers>
    </api>
    <api id="P:IOC.FW.Web.Handlers.TransformHandler.IsReusable">
      <apidata name="IsReusable" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_IsReusable" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="P:System.Web.IHttpHandler.IsReusable">
          <type api="T:System.Web.IHttpHandler" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW.Web" module="IOC.FW.Web" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.Handlers" />
        <type api="T:IOC.FW.Web.Handlers.TransformHandler" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.Handlers.TransformHandler.ProcessRequest(System.Web.HttpContext)">
      <apidata name="ProcessRequest" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="context">
          <type api="T:System.Web.HttpContext" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)">
          <type api="T:System.Web.IHttpHandler" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW.Web" module="IOC.FW.Web" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.Handlers" />
        <type api="T:IOC.FW.Web.Handlers.TransformHandler" ref="true" />
      </containers>
    </api>
    <api id="N:IOC.FW.Web.MVC">
      <apidata name="IOC.FW.Web.MVC" group="namespace" />
      <elements>
        <element api="T:IOC.FW.Web.MVC.Extensions" />
      </elements>
    </api>
    <api id="T:IOC.FW.Web.MVC.Extensions">
      <apidata name="Extensions" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:IOC.FW.Web.MVC.Extensions.ImageMinimumBytes" />
        <element api="M:IOC.FW.Web.MVC.Extensions.IsImage(System.Web.HttpPostedFileBase)" />
      </elements>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="F:IOC.FW.Web.MVC.Extensions.ImageMinimumBytes">
      <apidata name="ImageMinimumBytes" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <value>512</value>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC" />
        <type api="T:IOC.FW.Web.MVC.Extensions" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.MVC.Extensions.IsImage(System.Web.HttpPostedFileBase)">
      <apidata name="IsImage" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="postedFile">
          <type api="T:System.Web.HttpPostedFileBase" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC" />
        <type api="T:IOC.FW.Web.MVC.Extensions" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="N:IOC.FW.Web.MVC.Base">
      <apidata name="IOC.FW.Web.MVC.Base" group="namespace" />
      <elements>
        <element api="T:IOC.FW.Web.MVC.Base.BaseController" />
      </elements>
    </api>
    <api id="T:IOC.FW.Web.MVC.Base.BaseController">
      <apidata name="BaseController" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Web.Mvc.Controller" ref="true" />
          <type api="T:System.Web.Mvc.ControllerBase" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:IOC.FW.Web.MVC.Base.BaseController.OnException(System.Web.Mvc.ExceptionContext)" />
        <element api="M:IOC.FW.Web.MVC.Base.BaseController.#ctor" />
      </elements>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.Base" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.MVC.Base.BaseController.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.Base" />
        <type api="T:IOC.FW.Web.MVC.Base.BaseController" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.MVC.Base.BaseController.OnException(System.Web.Mvc.ExceptionContext)">
      <apidata name="OnException" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Web.Mvc.Controller.OnException(System.Web.Mvc.ExceptionContext)">
          <type api="T:System.Web.Mvc.Controller" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="filterContext">
          <type api="T:System.Web.Mvc.ExceptionContext" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.Base" />
        <type api="T:IOC.FW.Web.MVC.Base.BaseController" ref="true" />
      </containers>
    </api>
    <api id="N:IOC.FW.Web.MVC.Filters">
      <apidata name="IOC.FW.Web.MVC.Filters" group="namespace" />
      <elements>
        <element api="T:IOC.FW.Web.MVC.Filters.BasicAuthenticationFilter" />
        <element api="T:IOC.FW.Web.MVC.Filters.LogExceptionFilter" />
        <element api="T:IOC.FW.Web.MVC.Filters.NonCacheAttribute" />
      </elements>
    </api>
    <api id="T:IOC.FW.Web.MVC.Filters.BasicAuthenticationFilter">
      <apidata name="BasicAuthenticationFilter" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Web.Http.Filters.AuthorizationFilterAttribute" ref="true" />
          <type api="T:System.Web.Http.Filters.FilterAttribute" ref="true" />
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:IOC.FW.Web.MVC.Filters.BasicAuthenticationFilter.OnAuthorizeUser(System.String,System.String,System.Web.Http.Controllers.HttpActionContext)" />
        <element api="M:IOC.FW.Web.MVC.Filters.BasicAuthenticationFilter.Challenge(System.Web.Http.Controllers.HttpActionContext)" />
        <element api="M:IOC.FW.Web.MVC.Filters.BasicAuthenticationFilter.ParseAuthorizationHeader(System.Web.Http.Controllers.HttpActionContext)" />
        <element api="M:IOC.FW.Web.MVC.Filters.BasicAuthenticationFilter.OnAuthorization(System.Web.Http.Controllers.HttpActionContext)" />
        <element api="M:IOC.FW.Web.MVC.Filters.BasicAuthenticationFilter.Login(System.String,System.String)" />
        <element api="M:IOC.FW.Web.MVC.Filters.BasicAuthenticationFilter.#ctor" />
      </elements>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.Filters" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.MVC.Filters.BasicAuthenticationFilter.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="family" special="true" />
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.Filters" />
        <type api="T:IOC.FW.Web.MVC.Filters.BasicAuthenticationFilter" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.MVC.Filters.BasicAuthenticationFilter.Challenge(System.Web.Http.Controllers.HttpActionContext)">
      <apidata name="Challenge" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="actionContext">
          <type api="T:System.Web.Http.Controllers.HttpActionContext" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.Filters" />
        <type api="T:IOC.FW.Web.MVC.Filters.BasicAuthenticationFilter" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.MVC.Filters.BasicAuthenticationFilter.Login(System.String,System.String)">
      <apidata name="Login" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="user">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="password">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.Filters" />
        <type api="T:IOC.FW.Web.MVC.Filters.BasicAuthenticationFilter" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.MVC.Filters.BasicAuthenticationFilter.OnAuthorization(System.Web.Http.Controllers.HttpActionContext)">
      <apidata name="OnAuthorization" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Web.Http.Filters.AuthorizationFilterAttribute.OnAuthorization(System.Web.Http.Controllers.HttpActionContext)">
          <type api="T:System.Web.Http.Filters.AuthorizationFilterAttribute" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="actionContext">
          <type api="T:System.Web.Http.Controllers.HttpActionContext" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.Filters" />
        <type api="T:IOC.FW.Web.MVC.Filters.BasicAuthenticationFilter" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.MVC.Filters.BasicAuthenticationFilter.OnAuthorizeUser(System.String,System.String,System.Web.Http.Controllers.HttpActionContext)">
      <apidata name="OnAuthorizeUser" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="username">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="password">
          <type api="T:System.String" ref="true" />
        </parameter>
        <parameter name="actionContext">
          <type api="T:System.Web.Http.Controllers.HttpActionContext" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.Filters" />
        <type api="T:IOC.FW.Web.MVC.Filters.BasicAuthenticationFilter" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.MVC.Filters.BasicAuthenticationFilter.ParseAuthorizationHeader(System.Web.Http.Controllers.HttpActionContext)">
      <apidata name="ParseAuthorizationHeader" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="actionContext">
          <type api="T:System.Web.Http.Controllers.HttpActionContext" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:IOC.FW.Core.Base.BasicAuthenticationIdentity" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.Filters" />
        <type api="T:IOC.FW.Web.MVC.Filters.BasicAuthenticationFilter" ref="true" />
      </containers>
    </api>
    <api id="T:IOC.FW.Web.MVC.Filters.LogExceptionFilter">
      <apidata name="LogExceptionFilter" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Web.Mvc.IExceptionFilter" ref="true" />
      </implements>
      <elements>
        <element api="M:IOC.FW.Web.MVC.Filters.LogExceptionFilter.OnException(System.Web.Mvc.ExceptionContext)" />
        <element api="M:IOC.FW.Web.MVC.Filters.LogExceptionFilter.#ctor" />
      </elements>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.Filters" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.MVC.Filters.LogExceptionFilter.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.Filters" />
        <type api="T:IOC.FW.Web.MVC.Filters.LogExceptionFilter" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.MVC.Filters.LogExceptionFilter.OnException(System.Web.Mvc.ExceptionContext)">
      <apidata name="OnException" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="filterContext">
          <type api="T:System.Web.Mvc.ExceptionContext" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.Web.Mvc.IExceptionFilter.OnException(System.Web.Mvc.ExceptionContext)">
          <type api="T:System.Web.Mvc.IExceptionFilter" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.Filters" />
        <type api="T:IOC.FW.Web.MVC.Filters.LogExceptionFilter" ref="true" />
      </containers>
    </api>
    <api id="T:IOC.FW.Web.MVC.Filters.NonCacheAttribute">
      <apidata name="NonCacheAttribute" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Web.Mvc.ActionFilterAttribute" ref="true" />
          <type api="T:System.Web.Mvc.FilterAttribute" ref="true" />
          <type api="T:System.Attribute" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:IOC.FW.Web.MVC.Filters.NonCacheAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)" />
        <element api="M:IOC.FW.Web.MVC.Filters.NonCacheAttribute.#ctor" />
      </elements>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.Filters" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.MVC.Filters.NonCacheAttribute.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.Filters" />
        <type api="T:IOC.FW.Web.MVC.Filters.NonCacheAttribute" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.MVC.Filters.NonCacheAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <apidata name="OnActionExecuting" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Web.Mvc.ActionFilterAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
          <type api="T:System.Web.Mvc.ActionFilterAttribute" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="filterContext">
          <type api="T:System.Web.Mvc.ActionExecutingContext" ref="true" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.Web.Mvc.IActionFilter.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
          <type api="T:System.Web.Mvc.IActionFilter" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.Filters" />
        <type api="T:IOC.FW.Web.MVC.Filters.NonCacheAttribute" ref="true" />
      </containers>
    </api>
    <api id="N:IOC.FW.Web.MVC.Handler">
      <apidata name="IOC.FW.Web.MVC.Handler" group="namespace" />
      <elements>
        <element api="T:IOC.FW.Web.MVC.Handler.CompressHandler" />
        <element api="T:IOC.FW.Web.MVC.Handler.CompressedContent" />
        <element api="T:IOC.FW.Web.MVC.Handler.BasicAuthenticationHandler" />
      </elements>
    </api>
    <api id="T:IOC.FW.Web.MVC.Handler.BasicAuthenticationHandler">
      <apidata name="BasicAuthenticationHandler" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Net.Http.DelegatingHandler" ref="true" />
          <type api="T:System.Net.Http.HttpMessageHandler" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:IOC.FW.Web.MVC.Handler.BasicAuthenticationHandler.OnAuthorize(IOC.FW.Core.Base.BasicAuthenticationIdentity)" />
        <element api="M:IOC.FW.Web.MVC.Handler.BasicAuthenticationHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" />
        <element api="M:IOC.FW.Web.MVC.Handler.BasicAuthenticationHandler.ParseAuthorizationHeader(System.Net.Http.HttpRequestMessage)" />
        <element api="M:IOC.FW.Web.MVC.Handler.BasicAuthenticationHandler.Challenge(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage)" />
        <element api="M:IOC.FW.Web.MVC.Handler.BasicAuthenticationHandler.#ctor" />
      </elements>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.Handler" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.MVC.Handler.BasicAuthenticationHandler.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.Handler" />
        <type api="T:IOC.FW.Web.MVC.Handler.BasicAuthenticationHandler" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.MVC.Handler.BasicAuthenticationHandler.Challenge(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage)">
      <apidata name="Challenge" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="request">
          <type api="T:System.Net.Http.HttpRequestMessage" ref="true" />
        </parameter>
        <parameter name="response">
          <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.Handler" />
        <type api="T:IOC.FW.Web.MVC.Handler.BasicAuthenticationHandler" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.MVC.Handler.BasicAuthenticationHandler.OnAuthorize(IOC.FW.Core.Base.BasicAuthenticationIdentity)">
      <apidata name="OnAuthorize" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="identity">
          <type api="T:IOC.FW.Core.Base.BasicAuthenticationIdentity" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.Handler" />
        <type api="T:IOC.FW.Web.MVC.Handler.BasicAuthenticationHandler" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.MVC.Handler.BasicAuthenticationHandler.ParseAuthorizationHeader(System.Net.Http.HttpRequestMessage)">
      <apidata name="ParseAuthorizationHeader" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="request">
          <type api="T:System.Net.Http.HttpRequestMessage" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:IOC.FW.Core.Base.BasicAuthenticationIdentity" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.Handler" />
        <type api="T:IOC.FW.Web.MVC.Handler.BasicAuthenticationHandler" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.MVC.Handler.BasicAuthenticationHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <apidata name="SendAsync" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
          <type api="T:System.Net.Http.DelegatingHandler" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="request">
          <type api="T:System.Net.Http.HttpRequestMessage" ref="true" />
        </parameter>
        <parameter name="cancellationToken">
          <type api="T:System.Threading.CancellationToken" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task`1" ref="true">
          <specialization>
            <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.Handler" />
        <type api="T:IOC.FW.Web.MVC.Handler.BasicAuthenticationHandler" ref="true" />
      </containers>
    </api>
    <api id="T:IOC.FW.Web.MVC.Handler.CompressedContent">
      <apidata name="CompressedContent" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Net.Http.HttpContent" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:IOC.FW.Web.MVC.Handler.CompressedContent.#ctor(System.Net.Http.HttpContent,System.String)" />
        <element api="M:IOC.FW.Web.MVC.Handler.CompressedContent.TryComputeLength(System.Int64@)" />
        <element api="M:IOC.FW.Web.MVC.Handler.CompressedContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)" />
      </elements>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.Handler" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.MVC.Handler.CompressedContent.#ctor(System.Net.Http.HttpContent,System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="content">
          <type api="T:System.Net.Http.HttpContent" ref="true" />
        </parameter>
        <parameter name="encodingType">
          <type api="T:System.String" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.Handler" />
        <type api="T:IOC.FW.Web.MVC.Handler.CompressedContent" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.MVC.Handler.CompressedContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <apidata name="SerializeToStreamAsync" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
          <type api="T:System.Net.Http.HttpContent" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="stream">
          <type api="T:System.IO.Stream" ref="true" />
        </parameter>
        <parameter name="context">
          <type api="T:System.Net.TransportContext" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.Handler" />
        <type api="T:IOC.FW.Web.MVC.Handler.CompressedContent" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.MVC.Handler.CompressedContent.TryComputeLength(System.Int64@)">
      <apidata name="TryComputeLength" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Net.Http.HttpContent.TryComputeLength(System.Int64@)">
          <type api="T:System.Net.Http.HttpContent" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="length" out="true">
          <referenceTo>
            <type api="T:System.Int64" ref="false" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.Handler" />
        <type api="T:IOC.FW.Web.MVC.Handler.CompressedContent" ref="true" />
      </containers>
    </api>
    <api id="T:IOC.FW.Web.MVC.Handler.CompressHandler">
      <apidata name="CompressHandler" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Net.Http.DelegatingHandler" ref="true" />
          <type api="T:System.Net.Http.HttpMessageHandler" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:IOC.FW.Web.MVC.Handler.CompressHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" />
        <element api="M:IOC.FW.Web.MVC.Handler.CompressHandler.#ctor" />
      </elements>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.Handler" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.MVC.Handler.CompressHandler.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.Handler" />
        <type api="T:IOC.FW.Web.MVC.Handler.CompressHandler" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.MVC.Handler.CompressHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <apidata name="SendAsync" group="member" subgroup="method" />
      <memberdata visibility="family" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
          <type api="T:System.Net.Http.DelegatingHandler" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="request">
          <type api="T:System.Net.Http.HttpRequestMessage" ref="true" />
        </parameter>
        <parameter name="cancellationToken">
          <type api="T:System.Threading.CancellationToken" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Threading.Tasks.Task`1" ref="true">
          <specialization>
            <type api="T:System.Net.Http.HttpResponseMessage" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.Handler" />
        <type api="T:IOC.FW.Web.MVC.Handler.CompressHandler" ref="true" />
      </containers>
    </api>
    <api id="N:IOC.FW.Web.MVC.SimpleInjector">
      <apidata name="IOC.FW.Web.MVC.SimpleInjector" group="namespace" />
      <elements>
        <element api="T:IOC.FW.Web.MVC.SimpleInjector.SimpleInjectorWebApiDependencyResolver" />
        <element api="T:IOC.FW.Web.MVC.SimpleInjector.Register" />
      </elements>
    </api>
    <api id="T:IOC.FW.Web.MVC.SimpleInjector.Register">
      <apidata name="Register" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:IOC.FW.Web.MVC.SimpleInjector.Register.RegisterWebApi(SimpleInjector.Container)" />
        <element api="M:IOC.FW.Web.MVC.SimpleInjector.Register.#ctor" />
      </elements>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.SimpleInjector" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.MVC.SimpleInjector.Register.#ctor">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.SimpleInjector" />
        <type api="T:IOC.FW.Web.MVC.SimpleInjector.Register" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.MVC.SimpleInjector.Register.RegisterWebApi(SimpleInjector.Container)">
      <apidata name="RegisterWebApi" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="container">
          <type api="T:SimpleInjector.Container" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.SimpleInjector" />
        <type api="T:IOC.FW.Web.MVC.SimpleInjector.Register" ref="true" />
      </containers>
    </api>
    <api id="T:IOC.FW.Web.MVC.SimpleInjector.SimpleInjectorWebApiDependencyResolver">
      <apidata name="SimpleInjectorWebApiDependencyResolver" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <implements>
        <type api="T:System.Web.Http.Dependencies.IDependencyResolver" ref="true" />
        <type api="T:System.Web.Http.Dependencies.IDependencyScope" ref="true" />
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="M:IOC.FW.Web.MVC.SimpleInjector.SimpleInjectorWebApiDependencyResolver.#ctor(SimpleInjector.Container)" />
        <element api="M:IOC.FW.Web.MVC.SimpleInjector.SimpleInjectorWebApiDependencyResolver.BeginScope" />
        <element api="M:IOC.FW.Web.MVC.SimpleInjector.SimpleInjectorWebApiDependencyResolver.GetService(System.Type)" />
        <element api="M:IOC.FW.Web.MVC.SimpleInjector.SimpleInjectorWebApiDependencyResolver.GetServices(System.Type)" />
        <element api="M:IOC.FW.Web.MVC.SimpleInjector.SimpleInjectorWebApiDependencyResolver.Dispose" />
      </elements>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.SimpleInjector" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.MVC.SimpleInjector.SimpleInjectorWebApiDependencyResolver.#ctor(SimpleInjector.Container)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="container">
          <type api="T:SimpleInjector.Container" ref="true" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.SimpleInjector" />
        <type api="T:IOC.FW.Web.MVC.SimpleInjector.SimpleInjectorWebApiDependencyResolver" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.MVC.SimpleInjector.SimpleInjectorWebApiDependencyResolver.BeginScope">
      <apidata name="BeginScope" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <returns>
        <type api="T:System.Web.Http.Dependencies.IDependencyScope" ref="true" />
      </returns>
      <implements>
        <member api="M:System.Web.Http.Dependencies.IDependencyResolver.BeginScope">
          <type api="T:System.Web.Http.Dependencies.IDependencyResolver" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.SimpleInjector" />
        <type api="T:IOC.FW.Web.MVC.SimpleInjector.SimpleInjectorWebApiDependencyResolver" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.MVC.SimpleInjector.SimpleInjectorWebApiDependencyResolver.Dispose">
      <apidata name="Dispose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <implements>
        <member api="M:System.IDisposable.Dispose">
          <type api="T:System.IDisposable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.SimpleInjector" />
        <type api="T:IOC.FW.Web.MVC.SimpleInjector.SimpleInjectorWebApiDependencyResolver" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.MVC.SimpleInjector.SimpleInjectorWebApiDependencyResolver.GetService(System.Type)">
      <apidata name="GetService" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="serviceType">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <implements>
        <member api="M:System.Web.Http.Dependencies.IDependencyScope.GetService(System.Type)">
          <type api="T:System.Web.Http.Dependencies.IDependencyScope" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.SimpleInjector" />
        <type api="T:IOC.FW.Web.MVC.SimpleInjector.SimpleInjectorWebApiDependencyResolver" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.MVC.SimpleInjector.SimpleInjectorWebApiDependencyResolver.GetServices(System.Type)">
      <apidata name="GetServices" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="serviceType">
          <type api="T:System.Type" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.Object" ref="true" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:System.Web.Http.Dependencies.IDependencyScope.GetServices(System.Type)">
          <type api="T:System.Web.Http.Dependencies.IDependencyScope" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="IOC.FW.Web.MVC" module="IOC.FW.Web.MVC" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.MVC.SimpleInjector" />
        <type api="T:IOC.FW.Web.MVC.SimpleInjector.SimpleInjectorWebApiDependencyResolver" ref="true" />
      </containers>
    </api>
    <api id="N:IOC.FW.Web.Pagination">
      <apidata name="IOC.FW.Web.Pagination" group="namespace" />
      <elements>
        <element api="T:IOC.FW.Web.Pagination.Paginator" />
      </elements>
    </api>
    <api id="T:IOC.FW.Web.Pagination.Paginator">
      <apidata name="Paginator" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="F:IOC.FW.Web.Pagination.Paginator.Url" />
        <element api="F:IOC.FW.Web.Pagination.Paginator.UrlParams" />
        <element api="F:IOC.FW.Web.Pagination.Paginator.Page" />
        <element api="F:IOC.FW.Web.Pagination.Paginator.ItemsPerPage" />
        <element api="F:IOC.FW.Web.Pagination.Paginator.PrevPage" />
        <element api="F:IOC.FW.Web.Pagination.Paginator.NextPage" />
        <element api="F:IOC.FW.Web.Pagination.Paginator.TotalItems" />
        <element api="F:IOC.FW.Web.Pagination.Paginator.TotalPages" />
        <element api="F:IOC.FW.Web.Pagination.Paginator.PageRange" />
        <element api="F:IOC.FW.Web.Pagination.Paginator.FirstPageInRange" />
        <element api="F:IOC.FW.Web.Pagination.Paginator.LastPageInRange" />
        <element api="M:IOC.FW.Web.Pagination.Paginator.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})" />
        <element api="M:IOC.FW.Web.Pagination.Paginator.GetPrevUrl" />
        <element api="M:IOC.FW.Web.Pagination.Paginator.GetNextUrl" />
        <element api="M:IOC.FW.Web.Pagination.Paginator.GetCurrentPageUrl" />
        <element api="M:IOC.FW.Web.Pagination.Paginator.GetPageUrl(System.UInt32)" />
        <element api="M:IOC.FW.Web.Pagination.Paginator.GetQueryString(System.UInt32)" />
      </elements>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.Pagination" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.Pagination.Paginator.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="page">
          <type api="T:System.UInt32" ref="false" />
        </parameter>
        <parameter name="totalItems">
          <type api="T:System.UInt32" ref="false" />
        </parameter>
        <parameter name="itemsPerPage">
          <type api="T:System.UInt32" ref="false" />
        </parameter>
        <parameter name="pageRange">
          <type api="T:System.UInt32" ref="false" />
        </parameter>
        <parameter name="url" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="urlParams" optional="true">
          <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
            <specialization>
              <type api="T:System.String" ref="true" />
              <type api="T:System.Object" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.Pagination" />
        <type api="T:IOC.FW.Web.Pagination.Paginator" ref="true" />
      </containers>
    </api>
    <api id="F:IOC.FW.Web.Pagination.Paginator.FirstPageInRange">
      <apidata name="FirstPageInRange" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.UInt32" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.Pagination" />
        <type api="T:IOC.FW.Web.Pagination.Paginator" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.Pagination.Paginator.GetCurrentPageUrl">
      <apidata name="GetCurrentPageUrl" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.Pagination" />
        <type api="T:IOC.FW.Web.Pagination.Paginator" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.Pagination.Paginator.GetNextUrl">
      <apidata name="GetNextUrl" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.Pagination" />
        <type api="T:IOC.FW.Web.Pagination.Paginator" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.Pagination.Paginator.GetPageUrl(System.UInt32)">
      <apidata name="GetPageUrl" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="i">
          <type api="T:System.UInt32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.Pagination" />
        <type api="T:IOC.FW.Web.Pagination.Paginator" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.Pagination.Paginator.GetPrevUrl">
      <apidata name="GetPrevUrl" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.Pagination" />
        <type api="T:IOC.FW.Web.Pagination.Paginator" ref="true" />
      </containers>
    </api>
    <api id="M:IOC.FW.Web.Pagination.Paginator.GetQueryString(System.UInt32)">
      <apidata name="GetQueryString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="i">
          <type api="T:System.UInt32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.Pagination" />
        <type api="T:IOC.FW.Web.Pagination.Paginator" ref="true" />
      </containers>
    </api>
    <api id="F:IOC.FW.Web.Pagination.Paginator.ItemsPerPage">
      <apidata name="ItemsPerPage" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.UInt32" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.Pagination" />
        <type api="T:IOC.FW.Web.Pagination.Paginator" ref="true" />
      </containers>
    </api>
    <api id="F:IOC.FW.Web.Pagination.Paginator.LastPageInRange">
      <apidata name="LastPageInRange" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.UInt32" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.Pagination" />
        <type api="T:IOC.FW.Web.Pagination.Paginator" ref="true" />
      </containers>
    </api>
    <api id="F:IOC.FW.Web.Pagination.Paginator.NextPage">
      <apidata name="NextPage" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.UInt32" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.Pagination" />
        <type api="T:IOC.FW.Web.Pagination.Paginator" ref="true" />
      </containers>
    </api>
    <api id="F:IOC.FW.Web.Pagination.Paginator.Page">
      <apidata name="Page" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.UInt32" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.Pagination" />
        <type api="T:IOC.FW.Web.Pagination.Paginator" ref="true" />
      </containers>
    </api>
    <api id="F:IOC.FW.Web.Pagination.Paginator.PageRange">
      <apidata name="PageRange" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.UInt32" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.Pagination" />
        <type api="T:IOC.FW.Web.Pagination.Paginator" ref="true" />
      </containers>
    </api>
    <api id="F:IOC.FW.Web.Pagination.Paginator.PrevPage">
      <apidata name="PrevPage" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.UInt32" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.Pagination" />
        <type api="T:IOC.FW.Web.Pagination.Paginator" ref="true" />
      </containers>
    </api>
    <api id="F:IOC.FW.Web.Pagination.Paginator.TotalItems">
      <apidata name="TotalItems" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.UInt32" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.Pagination" />
        <type api="T:IOC.FW.Web.Pagination.Paginator" ref="true" />
      </containers>
    </api>
    <api id="F:IOC.FW.Web.Pagination.Paginator.TotalPages">
      <apidata name="TotalPages" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.UInt32" ref="false" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.Pagination" />
        <type api="T:IOC.FW.Web.Pagination.Paginator" ref="true" />
      </containers>
    </api>
    <api id="F:IOC.FW.Web.Pagination.Paginator.Url">
      <apidata name="Url" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.Pagination" />
        <type api="T:IOC.FW.Web.Pagination.Paginator" ref="true" />
      </containers>
    </api>
    <api id="F:IOC.FW.Web.Pagination.Paginator.UrlParams">
      <apidata name="UrlParams" group="member" subgroup="field" />
      <memberdata visibility="public" />
      <fielddata literal="false" initonly="true" serialized="true" />
      <returns>
        <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
          <specialization>
            <type api="T:System.String" ref="true" />
            <type api="T:System.Object" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="IOC.FW" module="IOC.FW" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:IOC.FW.Web.Pagination" />
        <type api="T:IOC.FW.Web.Pagination.Paginator" ref="true" />
      </containers>
    </api>
  </apis>
</reflection>